<?php
/**
 * @file
 * Code for the Stanford CAP API feature.
 */

include_once 'stanford_cap_api.features.inc';

define('CAP_ROOT_ORGANIZATION_ID', 1);

/**
 * Implements hook_menu().
 */
function stanford_cap_api_menu() {
  $items = array();

  $items['admin/config/cap'] = array(
    'title' => 'Community Academic Profiles',
    'description' => 'Community Academic Profiles API screens.',
    'position' => 'right',
    'weight' => -5,
    'page callback' => 'system_admin_menu_block_page',
    'access arguments' => array('access administration pages'),
    'file' => 'system.admin.inc',
    'file path' => drupal_get_path('module', 'system'),
  );

  $items['admin/config/cap/details'] = array(
    'title' => 'Details',
    'description' => "Displays information about the site's connection to the CAP API.",
    'page callback' => 'drupal_get_form',
    'page arguments' => array('stanford_cap_api_details_form'),
    // @todo Proper access check.
    'access callback' => TRUE,
    'weight' => -10,
    'file' => 'stanford_cap_api.admin.inc',
  );

  $items['admin/config/cap/settings'] = array(
    'title' => 'Settings',
    'description' => 'Provides administrators ability to change CAP API access settings.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('stanford_cap_api_settings_form'),
    // @todo Proper access check.
    'access callback' => TRUE,
    'weight' => 10,
    'file' => 'stanford_cap_api.admin.inc',
  );

  $items['admin/config/cap/import'] = array(
    'title' => 'Import profiles',
    'description' => 'Provides administrators ability to import CAP profiles.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('stanford_cap_api_import_form'),
    // @todo Proper access check.
    'access callback' => TRUE,
    'weight' => -4,
    'file' => 'stanford_cap_api.admin.inc',
  );

  $items['admin/config/cap/import/result'] = array(
    'title' => 'Import profiles',
    'description' => 'Provides administrators ability to import CAP profiles.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('stanford_cap_api_import_result_form'),
    // @todo Proper access check.
    'access callback' => TRUE,
    'file' => 'stanford_cap_api.admin.inc',
    'type' => MENU_CALLBACK
  );

  $items['admin/config/cap/profile_test'] = array(
    'title' => 'Faculty Profile Structure Synchronization',
    'description' => 'Faculty Profile Structure Synchronization',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('stanford_cap_api_profile_test'),
    // @todo Proper access check.
    'access callback' => TRUE,
    'file' => 'stanford_cap_api.admin.inc',
    'weight' => 11,
  );

  $items['admin/config/cap/manage'] = array(
    'title' => 'Manage profiles',
    'description' => 'Provides administrators ability to manage CAP profiles.',
    'page callback' => 'stanford_cap_api_manage',
    // @todo Proper access check.
    'access callback' => TRUE,
    'weight' => 0,
    'file' => 'stanford_cap_api.admin.inc',
  );

  $items['admin/config/cap/group'] = array(
    'title' => 'Group sync',
    'description' => 'Provides administrators ability to synchronize groups of CAP profiles.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('stanford_cap_api_group_sync_form'),
    // @todo Proper access check.
    'access callback' => TRUE,
    'weight' => -2,
    'file' => 'stanford_cap_api.admin.inc',
  );

  $items['admin/config/cap/group/%/delete'] = array(
    'title' => 'Drop group from synchronization',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('stanford_cap_api_group_sync_drop_form', 4),
    // @todo Proper access check.
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
    'file' => 'stanford_cap_api.admin.inc',
  );

  $items['admin/config/cap/group/%/sync'] = array(
    'title' => 'Synchronize group',
    'page callback' => 'stanford_cap_api_group_sync_now',
    'page arguments' => array(4),
    // @todo Proper access check.
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
    'file' => 'stanford_cap_api.admin.inc',
  );

  $items['stanford-cap-api-user-autocomplete'] = array(
    'title' => 'Autocomplete for CAP profile names',
    'page callback' => 'stanford_cap_api_user_autocomplete',
    // @todo Proper access check.
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
    'file' => 'stanford_cap_api.admin.inc',
  );

  return $items;
}

/**
 * Implements hook_preprocess_page
 */
function stanford_cap_api_preprocess_page(&$variables){
  // include css files only on admin pages
  if(arg(0) == 'admin' && arg(1) == 'config' && arg(2) == 'cap'){
    drupal_add_css(drupal_get_path('module', 'stanford_cap_api') . '/css/stanford_cap_api.css');
  }
}


/**
 * Synchronize fields structure from CAP profile to Drupal.
 *
 * @param array $profile
 *   CAP profile.
 */
function stanford_cap_api_synchronize_fields($profile) {

  foreach ($profile as $field_name => $field_data) {
    $node_field_name = _stanford_cap_api_generate_field_name($field_name);
    $field_info = field_info_field($node_field_name);
    // @todo Here we should grab field metadata from JSON schema.
    $field_type = _stanford_cap_api_get_field_type($field_name);
    // Field not exists yet.
    if (empty($field_info)) {
      $field_info = _stanford_cap_api_get_field_base_def($field_type, $node_field_name);
      // Do we know about this field type?
      if (!empty($field_info)) {
        field_create_field($field_info);
        // Logging field creation.
        _stanford_cap_api_log_field($node_field_name);
      }
    }
    $field_instance = field_info_instance('node', $node_field_name, 'cap_faculty_profile');
    if (empty($field_instance)) {
      // @todo Grab field label from JSON schema.
      $field_instance = _stanford_cap_api_get_field_instance_def($field_type, $node_field_name, $field_name);
      if (!empty($field_instance)) {
        field_create_instance($field_instance);
      }
    }
    if ($field_type == 'field_collection') {
      _stanford_cap_api_sync_subfields($field_data, $node_field_name);
    }
  }
}

/**
 * Implements hook_menu_alter().
 */
function stanford_cap_api_menu_alter(&$items) {
  $items['node/%node/edit']['access callback'] = 'stanford_cap_api_node_access';
  $items['admin/structure/types/manage/%node_type/fields']['access callback'] = 'stanford_cap_api_user_access';
  $items['admin/structure/types/manage/%node_type/fields']['access arguments'][] = 4;
}

/**
 * Access check callback.
 */
function stanford_cap_api_node_access($op, $node) {
  $access = node_access($op, $node);
  if ($access && $node->type == 'cap_faculty_profile') {
    if (!variable_get('cap_allow_edit', FALSE)) {
      $access = FALSE;
    }
  }

  return $access;
}

/**
 * Access check callback.
 */
function stanford_cap_api_user_access($permission, $node_type) {
  $access = user_access($permission);
  if ($access && $node_type->type == 'cap_faculty_profile') {
    if (!variable_get('cap_custom_fields', FALSE)) {
      $access = FALSE;
    }
  }

  return $access;
}

/**
 * Authenticate with CAP and return an authentication token.
 *
 * @param string $user
 *   User name to use to authenticate in CAP API instead of saved one.
 * @param string $pass
 *   Password to use to authenticate in CAP API instead of saved one.
 *
 * @return string|FALSE
 *   An authentication token that can be used for API calls or FALSE.
 */
function stanford_cap_api_auth($user = '', $pass = '') {

  $auth_uri = variable_get('cap_auth_uri', 'https://authz-test.stanford.edu/oauth/token');
  $user = empty($user) ? variable_get('cap_username', '') : $user;
  $pass = empty($pass) ? variable_get('cap_password', '') : $pass;

  $params = array(
    'grant_type' => 'client_credentials',
    'scope' => 'profiles.read_public',
  );

  if (empty($user) || empty($pass)) {
    return FALSE;
  }

  // Append user/pass, some system doesn't support http_build_url.
  $uri = parse_url($auth_uri);

  $host = $user . ':' . $pass . '@' . $uri['host'];
  $auth_url = str_replace($uri['host'], $host, $auth_uri);

  $auth_url = url($auth_url, array('query' => $params, 'external' => TRUE));
  $response = drupal_http_request($auth_url);
  // Error could be here as well.
  if (property_exists($response, 'error')) {
    $error_msg = 'Failed to fetch data from CAP API service. Error code is'
      . ' %code, error message is "%msg", request string was "%request".';
    $vars = array(
      '%code' => $response->code,
      '%msg' => $response->status_message,
      '%request' => $response->request,
    );
    watchdog('stanford_cap_api', $error_msg, $vars, WATCHDOG_WARNING);

    return FALSE;
  }

  // Log bad API authentication.
  $data = json_decode($response->data, TRUE);
  if (array_key_exists('error', $data)) {
    $error_msg = 'Error found in CAP API response. Error message is "%msg",'
      . ' response data was "%data".';
    $vars = array(
      '%msg' => $data['error_description'],
      '%data' => print_r($data, TRUE),
    );
    watchdog('stanford_cap_api', $error_msg, $vars, WATCHDOG_WARNING);

    return FALSE;
  }

  // Authentication successful, return the access token.
  if (array_key_exists('access_token', $data)) {
    return $data['access_token'];
  }

  return FALSE;
}

/**
 * Issue an API call against an API endpoint.
 *
 * @param string $endpoint
 *   Endpoint string.
 * @param array $params
 *   Additional parameters for request.
 *
 * @return array|FALSE
 *   Decoded JSON response or FALSE.
 */
function stanford_cap_api_request($endpoint, $params = array()) {
  // Real endpoint is "http://irt-dev.stanford.edu/cap-api"
  $api_base = variable_get('cap_api_base_url', 'http://irt-dev.stanford.edu/cap-api');

  $access_token = stanford_cap_api_auth();
  // Unable to fetch an auth token.
  if (!$access_token) {
    return FALSE;
  }

  $query = array(
    'access_token' => $access_token,
  );

  $request_url = url($api_base . $endpoint, array(
    'query' => $params += $query,
    'external' => TRUE,
  ));

  $response = drupal_http_request($request_url);
  // Error could be here as well.
  if (property_exists($response, 'error')) {
    $error_msg = 'Failed to fetch data from CAP API service. Error code is'
      . ' %code, error message is "%msg", request string was "%request".';
    $vars = array(
      '%code' => $response->code,
      '%msg' => $response->status_message,
      '%request' => $response->request,
    );
    watchdog('stanford_cap_api', $error_msg, $vars, WATCHDOG_WARNING);

    return FALSE;
  }

  // Log bad API authentication.
  $data = json_decode($response->data, TRUE);
  if (array_key_exists('error', $data)) {
    $error_msg = 'Error found in CAP API response. Error message is "%msg",'
      . ' response data was "%data".';
    $vars = array(
      '%msg' => $data['error_description'],
      '%data' => print_r($data, TRUE),
    );
    watchdog('stanford_cap_api', $error_msg, $vars, WATCHDOG_WARNING);

    return FALSE;
  }
  else {
    return $data;
  }
}

/**
 * Save organization fetch from CAP API.
 *
 * @param array $organization
 *   Array containing organization description.
 * @param int $orgid
 *   Organization ID inside Stanford University. Could be 0 for root entry,
 * Stanford University itself.
 */
function stanford_cap_api_save_organization($organization) {
  $orgid =& drupal_static(__FUNCTION__, CAP_ROOT_ORGANIZATION_ID);
  $organization['orgid'] = $orgid;
  if (isset($organization['children'])) {
    $childrens = $organization['children'];
    $parent_id = $orgid;
    $childrens_id = array();
    foreach ($childrens as $children) {
      $children['parent'] = $parent_id;
      $orgid++;
      $childrens_id[] = $orgid;
      stanford_cap_api_save_organization($children);
    }
    $organization['children'] = $childrens_id;
  }
  drupal_write_record('cap_api_orgs', $organization);
}

/**
 * Imports organizations from CAP API.
 *
 * Organizations have tree structure. To import them we must specify top level
 * organization code. This can be code of root entry - Stanford University(AA00)
 * itself, or code of one of departments, like School of Medicine(VAAA).
 *
 * @param string $top
 *   Top level organization code.
 */
function stanford_cap_api_import_organizations($top = 'AA00') {
  db_delete('cap_api_orgs')->execute();
  // Organizations endpoint.
  $endpoint = '/api/cap/v1/orgs';
  $params = array('orgCodes' => $top);
  $data = stanford_cap_api_request($endpoint, $params);
  if ($data) {
    foreach ($data as $organization) {
      stanford_cap_api_save_organization($organization);
    }
  }
}

/**
 * Implements hook_cron().
 */
function stanford_cap_api_cron() {
  // Run cron tasks between 1 and 5 hours.
  $tz = variable_get('date_default_timezone');
  $date = new DateObject('now', $tz);
  $hour_of_day = (int) $date->format('G');
  if ($hour_of_day >= 1 && $hour_of_day <= 5) {
    stanford_cap_api_import_organizations();
    stanford_cap_api_update_profiles();
    stanford_cap_api_sync_group_cron();
  }
  // Check if we have organizations imported.
  $ids = db_select('cap_api_orgs', 'orgs')
    ->fields('orgs', array('id'))
    ->execute()
    ->fetchCol();
  if (empty($ids)) {
    stanford_cap_api_import_organizations();
  }
}

/**
 * Import CAP profile.
 *
 * @param int $profile_id
 *   Profile ID.
 */
function stanford_cap_api_profile_import($profile_id) {
  $etag = stanford_cap_api_get_profile_etag($profile_id);
  $stored_metadata = stanford_cap_api_get_stored_profile_data($profile_id);
  if (empty($etag) && !empty($stored_metadata['etag'])) {
    $action = variable_get('cap_orphaned_profile_action', 'unpublish');
    switch ($action) {
      case 'unpublish':
        $nid = db_select('cap_api_profiles', 'p')
          ->condition('profile_id', $profile_id)
          ->fields('p', array('nid'))
          ->execute()
          ->fetchField();
        $node = node_load($nid);
        $node->status = NODE_NOT_PUBLISHED;
        node_save($node);
        db_delete('cap_api_profiles')
          ->condition('nid', $nid)
          ->execute();
        break;

      case 'remove':
        $nid = db_select('cap_api_profiles', 'p')
          ->condition('profile_id', $profile_id)
          ->fields('p', array('nid'))
          ->execute()
          ->fetchField();
        node_delete($nid);
        break;
    }
  }
  elseif (!empty($stored_metadata['etag']) && empty($stored_metadata['sync'])) {
    // Do nothing, we have synced flag off.
  }
  elseif (empty($stored_metadata['etag']) || $etag != $stored_metadata['etag']) {
    $profile = stanford_cap_api_get_profile($profile_id);
    if ($profile) {
      stanford_cap_api_synchronize_fields($profile);
      stanford_cap_api_profile_sync($profile);
    }
  }
}

/**
 * Loads profile from CAP network.
 *
 * @param string $profile_id
 *   Profile ID.
 *
 * @return array|FALSE
 *   Profile or FALSE.
 */
function stanford_cap_api_get_profile($profile_id) {
  $cache =& drupal_static(__FUNCTION__, array());
  if (!isset($cache[$profile_id])) {
    $cache[$profile_id] = stanford_cap_api_request('/api/profiles/v1/' . $profile_id);
  }

  return $cache[$profile_id];
}

/**
 * Finished callback for profiles import page.
 */
function stanford_cap_api_import_result_finished() {
  drupal_set_message(t('Profiles imported!'));
  unset($_SESSION['search_params']);
  unset($_SESSION['search_response']);
  drupal_goto('admin/config/cap/import');
}

/**
 * Synchronize CAP network profile data with Drupal node.
 *
 * @param array $profile
 *   CAP network profile.
 */
function stanford_cap_api_profile_sync($profile) {
  $nid = db_select('cap_api_profiles', 'cap')
    ->fields('cap', array('nid'))
    ->condition('profile_id', $profile['profileId'])
    ->execute()->fetchField();
  $node = $nid ? node_load($nid) : FALSE;
  if ($node) {
    stanford_cap_api_node_fields_update($node, $profile);
  }
  else {
    // Importing.
    $node = new stdClass();
    $node->title = $profile['displayName'];
    $node->uid = 0;
    $node->status = 1;
    $node->type = 'cap_faculty_profile';
    $node->created = REQUEST_TIME;
    $node->changed = REQUEST_TIME;
    $node->is_new = TRUE;
    $node->language = LANGUAGE_NONE;
    node_save($node);
    $node = node_load($node->nid, NULL, TRUE);
    stanford_cap_api_node_fields_import($node, $profile);
    // Saving profile<->node association.
    $record = array(
      'profile_id' => $profile['profileId'],
      'nid' => $node->nid,
      'etag' => $profile['meta']['etag'],
    );
    db_merge('cap_api_profiles')
      ->key(array('profile_id' => $profile['profileId']))
      ->fields($record)
      ->execute();
  }
}

/**
 * Save profile fields to node.
 *
 * @param $node
 * @param $profile
 */
function stanford_cap_api_node_fields_import($node, $profile) {
  $nw = entity_metadata_wrapper('node', $node);

  foreach ($profile as $field_name => $field_data) {
    _stanford_cap_api_save_field($node, $nw, $field_name, $field_data);
  }

  $nw->cap_profile_link->set(array('url' => _stanford_cap_api_format_cap_profile_url($profile)));
  $nw->cap_sync_date->set(REQUEST_TIME);
  $nw->save();
  $profile_id = $profile['profileId'];
  foreach ($node as $field_name => $field_data) {
    if (strpos($field_name, 'cap_') !== FALSE && $field_name != 'cap_profile_link' && $field_name != 'cap_sync_date') {
      $record = array(
        'profile_id' => $profile_id,
        'field_name' => $field_name,
        'hash' => $field_data,
      );
      drupal_write_record('cap_api_field_hashes', $record);
    }
  }
}

/**
 * Update profile fields in node.
 *
 * @param $node
 * @param $profile
 */
function stanford_cap_api_node_fields_update($node, $profile) {
  $nw = entity_metadata_wrapper('node', $node);
  $profile_id = $profile['profileId'];
  foreach ($profile as $field_name => $field_data) {
    $drupal_field = _stanford_cap_api_generate_field_name($field_name);
    $hash = db_select('cap_api_field_hashes', 'hashes')
      ->condition('profile_id', $profile_id)
      ->condition('field_name', $drupal_field)
      ->fields('hashes', array('hash'))
      ->execute()
      ->fetchField();
    if ($hash == serialize($node->{$drupal_field})) {
      $nw->{$drupal_field}->set(NULL);
      _stanford_cap_api_save_field($node, $nw, $field_name, $field_data);
    }
  }
  $nw->cap_profile_link->set(array('url' => _stanford_cap_api_format_cap_profile_url($profile)));
  $nw->cap_sync_date->set(REQUEST_TIME);
  $nw->save();
}

/**
 * Import multiply CAP profiles.
 *
 * @param array $profile_ids
 *   Array of profile ID's.
 */
function stanford_cap_api_profile_import_multiply($profile_ids) {
  foreach ($profile_ids as $profile_id) {
    stanford_cap_api_profile_import($profile_id);
  }
}

/**
 * Updates already imported profiles.
 */
function stanford_cap_api_update_profiles() {
  $profile_ids = db_select('cap_api_profiles', 'profiles')
    ->fields('profiles', array('profile_id'))
    ->execute()
    ->fetchCol();
  stanford_cap_api_profile_import_multiply($profile_ids);
}

/**
 * Returns etag for specified profile from CAP.
 *
 * Etag is checksum used to determine if profile was changed in CAP.
 *
 * @param string $profile_id
 *   CAP profile ID.
 *
 * @return string|FALSE
 *   CAP profile etag or FALSE.
 */
function stanford_cap_api_get_profile_etag($profile_id) {
  $etag = FALSE;
  if (is_numeric($profile_id)) {
    $profile = stanford_cap_api_get_profile($profile_id);
    if ($profile && isset($profile['meta']['etag'])) {
      $etag = $profile['meta']['etag'];
    }
  }

  return $etag;
}

/**
 * Returns metadata for stored specified profile.
 *
 * @param string $profile_id
 *   CAP profile ID.
 *
 * @return array|FALSE
 *   CAP profile metadata or FALSE.
 */
function stanford_cap_api_get_stored_profile_data($profile_id) {
  $data = FALSE;
  if (is_numeric($profile_id)) {
    $data = db_select('cap_api_profiles', 'cap')
      ->fields('cap')
      ->condition('profile_id', $profile_id)
      ->execute()->fetchAssoc();
  }

  return $data;
}

/**
 * Synchronize profiles of specified organization.
 *
 * @param string $org_code
 *   CAP organization code.
 *
 * @return int
 *   Count of synced profiles.
 *
 * @see http://www.stanford.edu/dept/pres-provost/budget/org/orgchart/
 */
function stanford_cap_api_sync_org_members($org_code) {
  $count = 0;
  $params = array('orgCodes' => $org_code);
  // This request used to get count of profiles of this organization.
  $data = stanford_cap_api_request('/api/profiles/v1', $params);
  if ($data && $data['totalCount'] > 0) {
    $count = $params['ps'] = $data['totalCount'];
    $data = stanford_cap_api_request('/api/profiles/v1', $params);
    foreach ($data['values'] as $profile) {
      stanford_cap_api_profile_import($profile['profileId']);
    }
  }

  return $count;
}

/**
 * Synchronize profiles of specified workgroup.
 *
 * @param string $workgroup_id
 *   CAP workgroup ID.
 *
 * @return int
 *   Count of synced profiles.
 */
function stanford_cap_api_sync_workgroup_members($workgroup_id) {
  $count = 0;
  $params = array('privGroups' => $workgroup_id);
  // This request used to get count of profiles of this organization.
  $data = stanford_cap_api_request('/api/profiles/v1', $params);
  if ($data && $data['totalCount'] > 0) {
    $count = $params['ps'] = $data['totalCount'];
    $data = stanford_cap_api_request('/api/profiles/v1', $params);
    foreach ($data['values'] as $profile) {
      stanford_cap_api_profile_import($profile['profileId']);
    }
  }

  return $count;
}

/**
 * Save CAP group for synchronization.
 *
 * @param string $type
 *   Type of group.
 * @param string $name
 *   Machine readable group name.
 * @param int $count
 *   Quantity of profiles associated with this group.
 * @param int $lastsynced
 *   Last synchronization timestamp.
 */
function stanford_cap_api_sync_group_save($type, $name, $count = 0, $lastsynced = NULL) {
  $record = array('name' => $name, 'type' => $type);
  if (isset($count)) {
    $record['count'] = $count;
  }
  if (isset($lastsynced)) {
    $record['lastsynced'] = $lastsynced;
  }
  db_merge('cap_api_sync_groups')
    ->key(array('name' => $name, 'type' => $type))
    ->fields($record)
    ->execute();
}

/**
 * Synchronize profiles of group.
 *
 * @param string $type
 *   Type of group.
 * @param string $name
 *   Group name.
 */
function stanford_cap_api_sync_group_sync($type, $name) {
  switch ($type) {
    case 'organization':
      $count = stanford_cap_api_sync_org_members($name);
      stanford_cap_api_sync_group_save($type, $name, $count, REQUEST_TIME);
      break;
    case 'workgroup':
      $count = stanford_cap_api_sync_workgroup_members($name);
      stanford_cap_api_sync_group_save($type, $name, $count, REQUEST_TIME);
      break;
  }
}

/**
 * Drop profiles group from synchronization.
 *
 * @param int $id
 *   Internal group ID.
 */
function stanford_cap_api_sync_group_drop($id) {
  db_delete('cap_api_sync_groups')->condition('id', $id)->execute();
}

/**
 * Callback for cron groups synchronization.
 */
function stanford_cap_api_sync_group_cron() {
  $groups = db_select('cap_api_sync_groups', 'groups')
    ->fields('groups')
    ->execute()
    ->fetchAll();
  foreach ($groups as $group) {
    stanford_cap_api_sync_group_sync($group->type, $group->name);
  }
}

/**
 * Implements hook_node_delete().
 */
function stanford_cap_api_node_delete($node) {
  db_delete('cap_api_profiles')
    ->condition('nid', $node->nid)
    ->execute();
}

/**
 * Implements hook_node_view().
 */
function stanford_cap_api_node_view($node, $view_mode) {
  $update_strategy = variable_get('cap_profile_update', 'nightly');
  if ($node->type = 'cap_faculty_profile' && $view_mode == 'full' && $update_strategy == 'viewing') {
    $profile_id = db_select('cap_api_profiles', 'p')
      ->condition('nid', $node->nid)
      ->fields('p', array('profile_id'))
      ->execute()
      ->fetchField();
    if ($profile_id) {
      stanford_cap_api_profile_import($profile_id);
    }
  }
}

/**
 * Implements hook_hierarchical_select_params().
 */
function stanford_cap_api_hierarchical_select_params() {
  return array();
}

/**
 * Implements hook_hierarchical_select_root_level().
 */
function stanford_cap_api_hierarchical_select_root_level() {
  $label = db_select('cap_api_orgs', 'orgs')
    ->condition('orgid', CAP_ROOT_ORGANIZATION_ID)
    ->fields('orgs', array('name'))
    ->execute()
    ->fetchField();
  $label = $label ? t($label) : t('Organizations not imported yet');

  return array(CAP_ROOT_ORGANIZATION_ID => $label);
}

/**
 * Implements hook_hierarchical_select_children().
 */
function stanford_cap_api_hierarchical_select_children($parent) {
  $cache =& drupal_static(__FUNCTION__, array());
  if (!isset($cache[$parent])) {
    $children = db_select('cap_api_orgs', 'orgs')->condition('orgid', $parent)
      ->fields('orgs', array('children'))->execute()->fetchField();
    if (!empty($children)) {
      $children = unserialize($children);
      $children = db_select('cap_api_orgs', 'orgs')
        ->condition('orgid', $children, 'IN')
        ->fields('orgs', array('orgid', 'name'))
        ->execute()
        ->fetchAllKeyed();
      $cache[$parent] = array_map('t', $children);
    }
    else {
      $cache[$parent] = array();
    }
  }

  return $cache[$parent];
}

/**
 * Implements hook_hierarchical_select_lineage().
 */
function stanford_cap_api_hierarchical_select_lineage($orgid) {
  $parents = array();
  $parent = $orgid;
  while ($parent != 0) {
    $parents[] = $parent;
    $parent = db_select('cap_api_orgs', 'orgs')
      ->condition('orgid', $parent)
      ->fields('orgs', array('parent'))
      ->execute()
      ->fetchField();
  }

  return array_reverse($parents);
}

/**
 * Implements hook_hierarchical_select_valid_item().
 */
function stanford_cap_api_hierarchical_select_valid_item($orgid) {
  $cache =& drupal_static(__FUNCTION__, array());
  if (!isset($cache[$orgid])) {
    $cache[$orgid] = db_select('cap_api_orgs', 'orgs')
      ->condition('orgid', $orgid)
      ->fields('orgs', array('orgid'))
      ->execute()
      ->fetchField();
  }

  return $cache[$orgid];
}

/**
 * Implements hook_hierarchical_select_item_get_label().
 */
function stanford_cap_api_hierarchical_select_item_get_label($orgid) {

  $label = db_select('cap_api_orgs', 'orgs')
    ->condition('orgid', $orgid)
    ->fields('orgs', array('name'))
    ->execute()
    ->fetchField();

  return check_plain($label);
}

/**
 * Implements hook_action_info().
 */
function stanford_cap_api_action_info() {
  return array(
    'stanford_cap_api_profile_stop_sync_action' => array(
      'type' => 'node',
      'label' => t('Stop profile synchronization'),
      'configurable' => FALSE,
      'triggers' => array(),
    ),
  );
}

/**
 * Stop profile syncing action.
 */
function stanford_cap_api_profile_stop_sync_action($entity) {
  if ($entity->type == 'cap_faculty_profile') {
    $count = db_update('cap_api_profiles')
      ->condition('nid', $entity->nid)
      ->fields(array('sync' => 0))
      ->execute();
    if ($count == 1) {
      watchdog(
        'stanford_cap_api',
        'Profile with ID %ID will not be synced anymore.',
        array('%ID' => $entity->cap_profileid[LANGUAGE_NONE][0]['value'])
      );
    }
  }
}

/**
 * Introduce field type while we have no JSON schema.
 *
 * @todo Drop as we will get access to JSON schema.
 */
function _stanford_cap_api_get_field_type($field_name) {
  $type = FALSE;
  switch ($field_name) {
    case 'academicYear':
    case 'academicYear8':
    case 'activity':
    case 'address':
    case 'address2':
    case 'alias':
    case 'apiLabel':
    case 'appointment':
    case 'californiaPhysicianLicense':
    case 'catalogNumber':
    case 'chicagoCitation':
    case 'city':
    case 'contentType':
    case 'dates':
    case 'degree':
    case 'department':
    case 'description':
    case 'details':
    case 'display':
    case 'displayName':
    case 'doiId':
    case 'email':
    case 'etag':
    case 'fax':
    case 'fieldOfStudy':
    case 'firstName':
    case 'fullName':
    case 'institution':
    case 'key':
    case 'lab':
    case 'label':
    case 'lastName':
    case 'latitude':
    case 'location':
    case 'longitude':
    case 'middleName':
    case 'name':
    case 'officeName':
    case 'org':
    case 'organizations':
    case 'orgCode':
    case 'patentAssignee':
    case 'patentInventor':
    case 'patentNumber':
    case 'patentTitle':
    case 'personalInterests':
    case 'personalUrlText':
    case 'phone':
    case 'populationServed':
    case 'position':
    case 'presentedTo':
    case 'profileShortDesc':
    case 'projectTitle':
    case 'pubMedId':
    case 'quarter':
    case 'refPatentCountryCode':
    case 'refPatentCountryText':
    case 'rel':
    case 'researchDesc':
    case 'researchUrlText':
    case 'role':
    case 'specificLocation':
    case 'state':
    case 'subject':
    case 'subjectCode':
    case 'title':
    case 'topic':
    case 'type':
    case 'uid':
    case 'universityId':
    case 'webOfScienceId':
    case 'yearIssued':
    case 'zip':
      $type = 'string';
      break;

    case 'clinicalFocus':
    case 'phoneNumbers':
    case 'terms':
    case 'keywords':
    case 'nameTokens':
      $type = 'string_multiply';
      break;

    case 'profileUrl':
    case 'url':
    case 'href':
    case 'orgUrl':
    case 'doiUrl':
    case 'pubMedUrl':
    case 'webOfScienceUrl':
    case 'personalUrl':
    case 'researchUrl':
    case 'clinicalTrialsUrl':
      $type = 'link';
      break;

    case 'capFaculty':
    case 'capStaff':
    case 'capPostdoc':
    case 'capMdStudent':
    case 'capMsStudent':
    case 'capPhdStudent':
    case 'physician':
    case 'primaryAlias':
    case 'ongoingProject':
    case 'studentInvolvementAvailable':
    case 'independentStudyInd':
    case 'exactNameMatch':
    case 'value':
    case 'academicInstituteDisplay':
    case 'bannerDisplay':
    case 'principalInvestigator':
    case 'featured':
    case 'partialNameMatch':
    case 'showFeaturedPublicationsFirst':
      $type = 'boolean';
      break;

    case 'lastModified':
    case 'startYear':
    case 'endYear':
    case 'year':
    case 'startDate':
    case 'endDate':
    case 'lastModifiedDate':
    case 'firstPublished':
    case 'patentDate':
      $type = 'date';
      break;

    case 'profileId':
    case 'ordinal':
    case 'weight':
    case 'publicationId':
      $type = 'integer';
      break;

    case 'abstract':
    case 'mlaCitation':
    case 'apaCitation':
    case 'professionalInterests':
    case 'currentRoleAtStanford':
    case 'bio':
    case 'fullText':
    case 'shortText':
    case 'terseText':
    case 'brief':
    case 'full':
      $type = 'text';
      break;

    case 'activeAffiliations':
    case 'administrativeAppointments':
    case 'advisees':
    case 'advisor':
    case 'affiliations':
    case 'aliases':
    case 'alternateContact':
    case 'areas':
    case 'associatedPrograms':
    case 'clerkships':
    case 'clinicalContacts':
    case 'clinicalInterests':
    case 'collaborators':
    case 'communityAndInternationalWork':
    case 'concentrations':
    case 'contact':
    case 'courses':
    case 'coursesTaught':
    case 'currentResearchInterests':
    case 'cv':
    case 'disclosureStatement':
    case 'documents':
    case 'education':
    case 'flags':
    case 'graduateAndFellowshipPrograms':
    case 'honorsAndAwards':
    case 'independentStudyCourses':
    case 'industryRelationships':
    case 'internetLinks':
    case 'labAffiliations':
    case 'legal':
    case 'links':
    case 'longTitle':
    case 'maintainers':
    case 'media':
    case 'membershipOrganizations':
    case 'mentor':
    case 'meta':
    case 'names':
    case 'nihBiosketch':
      // @todo Now there are two kinds of "organization" field. One is "string"
      // and second is field collection. The main problem of handling it is that
      // there could be multiply field sets in collections.
      //case 'organization':
    case 'origCourses':
    case 'postdoctoralAdvisees':
    case 'preferred':
    case 'presentations':
    case 'primaryContact':
    case 'professionalOrganizations':
    case 'profilePatents':
    case 'profilePhotos':
    case 'projects':
    case 'projectType':
    case 'publications':
    case 'publicationTags':
    case 'researchProjects':
    case 'resume':
    case 'serviceWork':
    case 'shortTitle':
    case 'similarProfiles':
    case 'stanfordAdvisors':
    case 'status':
    case 'supervisors':
    case 'titles':
    case 'visibility':
    case 'workExperience':
      $type = 'field_collection';
      break;

    case 'big':
    case 'bigger':
    case 'small':
    case 'square':
      $type = 'image';
      break;
  }

  return $type;
}

/**
 * Returns Drupal base field definition based of JSON field type.
 */
function _stanford_cap_api_get_field_base_def($type, $name) {
  $info = FALSE;
  switch ($type) {
    case 'link':
      $info = array(
        'active' => 1,
        'cardinality' => 1,
        'deleted' => 0,
        'entity_types' => array(),
        'field_name' => $name,
        'foreign keys' => array(),
        'indexes' => array(),
        'locked' => 0,
        'module' => 'link',
        'settings' => array(
          'attributes' => array(
            'class' => '',
            'rel' => '',
            'target' => 'default',
          ),
          'display' => array(
            'url_cutoff' => 80,
          ),
          'enable_tokens' => 1,
          'title' => 'optional',
          'title_maxlength' => 128,
          'title_value' => '',
          'url' => 0,
        ),
        'translatable' => 0,
        'type' => 'link_field',
      );
      break;

    case 'date':
      $info = array(
        'active' => 1,
        'cardinality' => 1,
        'deleted' => 0,
        'entity_types' => array(),
        'field_name' => $name,
        'foreign keys' => array(),
        'indexes' => array(),
        'locked' => 0,
        'module' => 'date',
        'settings' => array(
          'cache_count' => 4,
          'cache_enabled' => 0,
          'granularity' => array(
            'day' => 'day',
            'hour' => 0,
            'minute' => 0,
            'month' => 'month',
            'second' => 0,
            'year' => 'year',
          ),
          'timezone_db' => '',
          'todate' => '',
          'tz_handling' => 'none',
        ),
        'translatable' => 0,
        'type' => 'datestamp',
      );
      break;

    case 'string':
      $info = array(
        'active' => 1,
        'cardinality' => 1,
        'deleted' => 0,
        'entity_types' => array(),
        'field_name' => $name,
        'foreign keys' => array(
          'format' => array(
            'columns' => array(
              'format' => 'format',
            ),
            'table' => 'filter_format',
          ),
        ),
        'indexes' => array(
          'format' => array(
            0 => 'format',
          ),
        ),
        'locked' => 0,
        'module' => 'text',
        'settings' => array(
          'max_length' => 255,
        ),
        'translatable' => 0,
        'type' => 'text',
      );
      break;

    case 'string_multiply':
      $info = array(
        'active' => 1,
        'cardinality' => -1,
        'deleted' => 0,
        'entity_types' => array(),
        'field_name' => $name,
        'foreign keys' => array(
          'format' => array(
            'columns' => array(
              'format' => 'format',
            ),
            'table' => 'filter_format',
          ),
        ),
        'indexes' => array(
          'format' => array(
            0 => 'format',
          ),
        ),
        'locked' => 0,
        'module' => 'text',
        'settings' => array(
          'max_length' => 255,
        ),
        'translatable' => 0,
        'type' => 'text',
      );
      break;

    case 'text':
      $info = array(
        'active' => 1,
        'cardinality' => 1,
        'deleted' => 0,
        'entity_types' => array(),
        'field_name' => $name,
        'foreign keys' => array(
          'format' => array(
            'columns' => array(
              'format' => 'format',
            ),
            'table' => 'filter_format',
          ),
        ),
        'indexes' => array(
          'format' => array(
            0 => 'format',
          ),
        ),
        'locked' => 0,
        'module' => 'text',
        'settings' => array(),
        'translatable' => 0,
        'type' => 'text_long',
      );
      break;

    case 'integer':
      $info = array(
        'active' => 1,
        'cardinality' => 1,
        'deleted' => 0,
        'entity_types' => array(),
        'field_name' => $name,
        'foreign keys' => array(),
        'indexes' => array(),
        'locked' => 0,
        'module' => 'number',
        'settings' => array(),
        'translatable' => 0,
        'type' => 'number_integer',
      );
      break;

    case 'field_collection':
      $info = array(
        'active' => 1,
        'cardinality' => -1,
        'deleted' => 0,
        'entity_types' => array(),
        'field_name' => $name,
        'foreign keys' => array(),
        'indexes' => array(),
        'locked' => 0,
        'module' => 'field_collection',
        'settings' => array(
          'hide_blank_items' => 1,
          'path' => '',
        ),
        'translatable' => 0,
        'type' => 'field_collection',
      );
      break;

    case 'boolean':
      $info = array(
        'active' => 1,
        'cardinality' => 1,
        'deleted' => 0,
        'entity_types' => array(),
        'field_name' => $name,
        'foreign keys' => array(),
        'indexes' => array(
          'value' => array(
            0 => 'value',
          ),
        ),
        'locked' => 0,
        'module' => 'list',
        'settings' => array(
          'allowed_values' => array(
            0 => '',
            1 => '',
          ),
          'allowed_values_function' => '',
        ),
        'translatable' => 0,
        'type' => 'list_boolean',
      );
      break;

    case 'image':
      $info = array(
        'active' => 1,
        'cardinality' => 1,
        'deleted' => 0,
        'entity_types' => array(),
        'field_name' => $name,
        'foreign keys' => array(
          'fid' => array(
            'columns' => array(
              'fid' => 'fid',
            ),
            'table' => 'file_managed',
          ),
        ),
        'indexes' => array(
          'fid' => array(
            0 => 'fid',
          ),
        ),
        'locked' => 0,
        'module' => 'image',
        'settings' => array(
          'default_image' => 0,
          'uri_scheme' => 'public',
        ),
        'translatable' => 0,
        'type' => 'image',
      );
      break;
  }

  return $info;
}

/**
 * Generates instance info for profile fields.
 *
 * @param $type
 * @param $name
 * @param $label
 *
 * @return array|FALSE
 */
function _stanford_cap_api_get_field_instance_def($type, $name, $label, $fc_field = FALSE) {
  $info = FALSE;
  $label = check_plain($label);
  switch ($type) {
    case 'link':
      $info = array(
        'bundle' => empty($fc_field) ? 'cap_faculty_profile' : $fc_field,
        'default_value' => NULL,
        'deleted' => 0,
        'description' => '',
        'display' => array(
          'default' => array(
            'label' => 'above',
            'module' => 'link',
            'settings' => array(),
            'type' => 'link_default',
          ),
        ),
        'entity_type' => empty($fc_field) ? 'node' : 'field_collection_item',
        'field_name' => $name,
        'label' => $label,
        'required' => 0,
        'settings' => array(
          'attributes' => array(
            'class' => '',
            'configurable_title' => 0,
            'rel' => '',
            'target' => 'default',
            'title' => '',
          ),
          'display' => array(
            'url_cutoff' => 80,
          ),
          'enable_tokens' => 1,
          'rel_remove' => 'default',
          'title' => 'none',
          'title_maxlength' => 128,
          'title_value' => '',
          'url' => 0,
          'user_register_form' => FALSE,
          'validate_url' => 1,
        ),
        'widget' => array(
          'active' => 0,
          'module' => 'link',
          'settings' => array(),
          'type' => 'link_field',
        ),
      );
      break;

    case 'date':
      $info = array(
        'bundle' => empty($fc_field) ? 'cap_faculty_profile' : $fc_field,
        'default_value' => NULL,
        'deleted' => 0,
        'description' => '',
        'display' => array(
          'default' => array(
            'label' => 'above',
            'module' => 'date',
            'settings' => array(
              'format_type' => 'long',
              'fromto' => 'both',
              'multiple_from' => '',
              'multiple_number' => '',
              'multiple_to' => '',
            ),
            'type' => 'date_default',
          ),
        ),
        'entity_type' => empty($fc_field) ? 'node' : 'field_collection_item',
        'field_name' => $name,
        'label' => $label,
        'required' => 0,
        'settings' => array(
          'default_value' => 'now',
          'default_value2' => 'same',
          'default_value_code' => '',
          'default_value_code2' => '',
          'user_register_form' => FALSE,
        ),
        'widget' => array(
          'active' => 1,
          'module' => 'date',
          'settings' => array(
            'display_all_day' => 0,
            'increment' => 15,
            'input_format' => 'm/d/Y - H:i:s',
            'input_format_custom' => '',
            'label_position' => 'above',
            'text_parts' => array(),
            'year_range' => '-3:+3',
          ),
          'type' => 'date_select',
        ),
      );
      break;

    case 'string':
    case 'string_multiply':
      $info = array(
        'bundle' => empty($fc_field) ? 'cap_faculty_profile' : $fc_field,
        'default_value' => NULL,
        'deleted' => 0,
        'description' => '',
        'display' => array(
          'default' => array(
            'label' => 'above',
            'module' => 'text',
            'settings' => array(),
            'type' => 'text_default',
          ),
        ),
        'entity_type' => empty($fc_field) ? 'node' : 'field_collection_item',
        'field_name' => $name,
        'label' => $label,
        'required' => 0,
        'settings' => array(
          'text_processing' => 0,
          'user_register_form' => FALSE,
        ),
        'widget' => array(
          'active' => 1,
          'module' => 'text',
          'settings' => array(
            'size' => 60,
          ),
          'type' => 'text_textfield',
        ),
      );
      break;

    case 'text':
      $info = array(
        'bundle' => empty($fc_field) ? 'cap_faculty_profile' : $fc_field,
        'default_value' => NULL,
        'deleted' => 0,
        'description' => '',
        'display' => array(
          'default' => array(
            'label' => 'above',
            'module' => 'text',
            'settings' => array(),
            'type' => 'text_default',
          ),
        ),
        'entity_type' => empty($fc_field) ? 'node' : 'field_collection_item',
        'field_name' => $name,
        'label' => $label,
        'required' => 0,
        'settings' => array(
          'text_processing' => 0,
          'user_register_form' => FALSE,
        ),
        'widget' => array(
          'active' => 1,
          'module' => 'text',
          'settings' => array(
            'rows' => 5,
          ),
          'type' => 'text_textarea',
        ),
      );
      break;

    case 'integer':
      $info = array(
        'bundle' => empty($fc_field) ? 'cap_faculty_profile' : $fc_field,
        'default_value' => NULL,
        'deleted' => 0,
        'description' => '',
        'display' => array(
          'default' => array(
            'label' => 'above',
            'module' => 'number',
            'settings' => array(
              'decimal_separator' => '.',
              'prefix_suffix' => TRUE,
              'scale' => 0,
              'thousand_separator' => ' ',
            ),
            'type' => 'number_integer',
          ),
        ),
        'entity_type' => empty($fc_field) ? 'node' : 'field_collection_item',
        'field_name' => $name,
        'label' => $label,
        'required' => 0,
        'settings' => array(
          'max' => '',
          'min' => '',
          'prefix' => '',
          'suffix' => '',
          'user_register_form' => FALSE,
        ),
        'widget' => array(
          'active' => 0,
          'module' => 'number',
          'settings' => array(),
          'type' => 'number',
        ),
      );
      break;

    case 'boolean':
      $info = array(
        'bundle' => empty($fc_field) ? 'cap_faculty_profile' : $fc_field,
        'default_value' => array(
          0 => array(
            'value' => 0,
          ),
        ),
        'deleted' => 0,
        'description' => '',
        'display' => array(
          'default' => array(
            'label' => 'above',
            'module' => 'list',
            'settings' => array(),
            'type' => 'list_default',
          ),
        ),
        'entity_type' => empty($fc_field) ? 'node' : 'field_collection_item',
        'field_name' => $name,
        'label' => $label,
        'required' => 0,
        'settings' => array(
          'user_register_form' => FALSE,
        ),
        'widget' => array(
          'active' => 1,
          'module' => 'options',
          'settings' => array(
            'display_label' => 1,
          ),
          'type' => 'options_onoff',
        ),
      );
      break;

    case 'field_collection':
      $info = array(
        'bundle' => empty($fc_field) ? 'cap_faculty_profile' : $fc_field,
        'default_value' => NULL,
        'deleted' => 0,
        'description' => '',
        'display' => array(
          'default' => array(
            'label' => 'above',
            'module' => 'field_collection',
            'settings' => array(
              'add' => 'Add',
              'delete' => 'Delete',
              'description' => TRUE,
              'edit' => 'Edit',
              'view_mode' => 'full',
            ),
            'type' => 'field_collection_view',
          ),
        ),
        'entity_type' => empty($fc_field) ? 'node' : 'field_collection_item',
        'field_name' => $name,
        'label' => $label,
        'required' => 0,
        'settings' => array(
          'user_register_form' => FALSE,
        ),
        'widget' => array(
          'active' => 0,
          'module' => 'field_collection',
          'settings' => array(),
          'type' => 'field_collection_embed',
        ),
      );
      break;

    case 'image':
      $info = array(
        'bundle' => empty($fc_field) ? 'cap_faculty_profile' : $fc_field,
        'deleted' => 0,
        'description' => '',
        'display' => array(
          'default' => array(
            'label' => 'above',
            'module' => 'image',
            'settings' => array(
              'image_link' => '',
              'image_style' => '',
            ),
            'type' => 'image',
          ),
          'teaser' => array(
            'label' => 'above',
            'settings' => array(),
            'type' => 'hidden',
          ),
        ),
        'entity_type' => empty($fc_field) ? 'node' : 'field_collection_item',
        'field_name' => $name,
        'label' => $label,
        'required' => 0,
        'settings' => array(
          'alt_field' => 0,
          'default_image' => 0,
          'file_directory' => variable_get('cap_profile_photos', 'profile_photos'),
          'file_extensions' => 'png gif jpg jpeg',
          'max_filesize' => '',
          'max_resolution' => '',
          'min_resolution' => '',
          'title_field' => 0,
          'user_register_form' => FALSE,
        ),
        'widget' => array(
          'active' => 1,
          'module' => 'image',
          'settings' => array(
            'preview_image_style' => 'thumbnail',
            'progress_indicator' => 'throbber',
          ),
          'type' => 'image_image',
        ),
      );
      break;
  }

  return $info;
}

/**
 * Writes created field name to DB.
 *
 * @param string $field_name.
 */
function _stanford_cap_api_log_field($field_name) {
  $record = array('field_name' => $field_name);
  drupal_write_record('cap_api_fields', $record);
  watchdog('stanford_cap_api', 'Field @field was created by stanford_cap_api module.', array('@field' => $field_name));
}

/**
 * Generates CAP network profile URL.
 *
 * @todo Remove this when appropriate field would be available.
 *
 * @param array $profile
 *   CAP network profile.
 *
 * @return string
 *   CAP network profile URL.
 */
function _stanford_cap_api_format_cap_profile_url($profile) {
  $href = 'https://med.stanford.edu/profiles/';
  if (!empty($profile['names']['legal'])) {
    $href .= 'stanford/';
    $href .= $profile['names']['legal']['firstName'];
    $href .= '_' . $profile['names']['legal']['lastName'];
  }
  elseif (!empty($profile['names']['preferred'])) {
    $href .= 'stanford/';
    $href .= $profile['names']['preferred']['firstName'];
    $href .= '_' . $profile['names']['preferred']['lastName'];
  }

  return $href;
}

/**
 * Synchronize profile subfields.
 *
 * @param array $subfields
 *   Subfields of field attached no profile node,
 * @param string $node_field_name
 *   Field name attached to node.
 */
function _stanford_cap_api_sync_subfields($subfields, $node_field_name) {
  // Subfields could come in 2 types: 1) array of different fields(e.g. just a
  //fields set), in this case indexes are field names; 2) array of single field
  // values - in this case this array is keyed with indexes.
  // With "array_key_exists(0, $subfields)" we checking for second case.
  if (is_array($subfields) && !empty($subfields) && array_key_exists(0, $subfields)) {
    foreach ($subfields as $subfld) {
      _stanford_cap_api_sync_subfields($subfld, $node_field_name);
    }
  }
  else {
    foreach ($subfields as $subfield => $subfield_data) {
      $fc_field_name = _stanford_cap_api_generate_field_name($subfield);
      $subfield_type = _stanford_cap_api_get_field_type($subfield);
      $subfield_info = field_info_field($fc_field_name);
      if (empty($subfield_info)) {
        $subfield_info = _stanford_cap_api_get_field_base_def($subfield_type, $fc_field_name);
        if (!empty($subfield_info)) {
          field_create_field($subfield_info);
          // Logging field creation.
          _stanford_cap_api_log_field($fc_field_name);
        }
      }
      $subfield_instance = field_info_instance('field_collection_item', $fc_field_name, $node_field_name);
      if (empty($subfield_instance)) {
        $subfield_instance = _stanford_cap_api_get_field_instance_def($subfield_type, $fc_field_name, $subfield, $node_field_name);
        if (!empty($subfield_instance)) {
          field_create_instance($subfield_instance);
        }
      }
      if ($subfield_type == 'field_collection') {
        _stanford_cap_api_sync_subfields($subfield_data, $fc_field_name);
      }
    }
  }
}

/**
 * Generate Drupal compliant field name.
 *
 * @param string $field_name
 *   CAP profile field name.
 *
 * @return string
 *   Drupal field name..
 */
function _stanford_cap_api_generate_field_name($field_name) {
  $node_field_name = 'cap_' . drupal_strtolower($field_name);
  if (drupal_strlen($node_field_name) > 32) {
    $node_field_name = substr($node_field_name, 0, 32);
  }

  return $node_field_name;
}

/**
 * Save CAP profile field value.
 *
 * @param object $entity
 *   Host entity of field.
 * @param object $wrapper
 *   Entity wrapper.
 * @param string $field_name
 *   CAP profile field name.
 * @param array $field_data
 *   CAP profile field data.
 */
function _stanford_cap_api_save_field(&$entity, &$wrapper, $field_name, $field_data) {

  $drupal_field_name = _stanford_cap_api_generate_field_name($field_name);
  $props_info = $wrapper->getPropertyInfo();
  if (isset($props_info[$drupal_field_name])) {
    $field_type = _stanford_cap_api_get_field_type($field_name);
    switch ($field_type) {
      case 'link':
        if (is_string($field_data)) {
          $wrapper->{$drupal_field_name}->set(array('url' => $field_data));
        }
        break;

      case 'date':
        if (is_string($field_data)) {
          $wrapper->{$drupal_field_name}->set(strtotime($field_data));
        }
        elseif (!empty($field_data['value'])) {
          $wrapper->{$drupal_field_name}->set(strtotime($field_data['value']));
        }
        break;

      case 'string':
        if (is_string($field_data)) {
          // @todo Sometimes 'label' field just a bit longer then we expect,
          // e.g. 264-270 chars, so we truncating data to 255 until we get schema.
          $wrapper->{$drupal_field_name}->set(drupal_substr($field_data, 0, 255));
        }
        elseif (is_array($field_data) && !empty($field_data['html'])) {
          $wrapper->{$drupal_field_name}->set(drupal_substr($field_data['html'], 0, 255));
        }
        break;

      case 'string_multiply':
        $values = array();
        foreach ($field_data as $field) {
          if (is_string($field)) {
            $values[] = drupal_substr($field, 0, 255);
          }
        }
        $wrapper->{$drupal_field_name}->set($values);
        break;

      case 'text':
        if (is_string($field_data)) {
          $wrapper->{$drupal_field_name}->set($field_data);
        }
        elseif (is_array($field_data) && !empty($field_data['html'])) {
          $wrapper->{$drupal_field_name}->set($field_data['html']);
        }
        break;

      case 'integer':
        if (is_numeric($field_data)) {
          $wrapper->{$drupal_field_name}->set($field_data);
        }
        break;

      case 'boolean':
        if (is_string($field_data)) {
          $wrapper->{$drupal_field_name}->set($field_data);
        }
        break;

      case 'field_collection':
        // This is multi-value field collection.
        if (is_array($field_data) && !empty($field_data) && array_key_exists(0, $field_data)) {
          foreach ($field_data as $fc_subfield_data) {
            _stanford_cap_api_save_field($entity, $wrapper, $field_name, $fc_subfield_data);
          }
        }
        else {
          if (is_array($field_data) && !empty($field_data)) {
            $fc_item = entity_create('field_collection_item', array('field_name' => $drupal_field_name));
            $entity_type = method_exists($entity, 'entityType') ? 'field_collection_item' : 'node';
            $fc_item->setHostEntity($entity_type, $entity);
            $fc_item->save(TRUE);
            $fc_wrapper = entity_metadata_wrapper('field_collection_item', $fc_item);
            foreach ($field_data as $fc_subfield => $fc_subfield_data) {
              _stanford_cap_api_save_field($fc_item, $fc_wrapper, $fc_subfield, $fc_subfield_data);
            }
            $fc_item->save(TRUE);
          }
        }
        break;

      case 'image':
        $ext = drupal_substr($field_data['contentType'], 6);
        $request_url = str_replace('irt-dev', 'med', $field_data['url']);
        parse_str(parse_url($field_data['url'], PHP_URL_QUERY), $query);
        $profile_id = $query['facultyId'];

        $response = drupal_http_request($request_url);
        if (property_exists($response, 'error')) {
          $error_msg = 'Failed to fetch profile image of type %type for profile'
            . ' %profile_id . Error code is'
            . ' %code, error message is "%msg", request string was "%request".';
          $vars = array(
            '%code' => $response->code,
            '%msg' => $response->status_message,
            '%request' => $response->request,
          );
          watchdog('stanford_cap_api', $error_msg, $vars, WATCHDOG_WARNING);

          break;
        }
        $path = 'public://'
          . variable_get('cap_profile_photos', 'profile_photos')
          . '/profile_'
          . $profile_id . '_' . $field_data['type'] . '.' . $ext;
        $dir = drupal_dirname($path);
        if (!is_dir($dir) && !mkdir($dir)) {
          watchdog('stanford_cap_api', 'Failed to create directory %dir', array('%dir' => $dir), WATCHDOG_WARNING);

          break;
        }
        $file = file_save_data($response->data, $path, FILE_EXISTS_REPLACE);
        $wrapper->{$drupal_field_name}->set(array('fid' => $file->fid));

        break;
    }
  }
}

/**
 * Wrapper for batch groups synchronization.
 */
function _stanford_cap_api_sync_group_wrapper($group_type, $group_name) {
  stanford_cap_api_sync_group_save($group_type, $group_name);
  stanford_cap_api_sync_group_sync($group_type, $group_name);
}
