<?php
/**
 * @file
 * Code for the Stanford CAP API feature.
 */

include_once 'stanford_cap_api.features.inc';

/**
 * Implements hook_menu().
 */
function stanford_cap_api_menu() {
  $items = array();

  $items['admin/config/cap'] = array(
    'title' => 'Community Academic Profiles',
    'description' => 'Community Academic Profiles API screens.',
    'position' => 'right',
    'weight' => -5,
    'page callback' => 'system_admin_menu_block_page',
    'access arguments' => array('access administration pages'),
    'file' => 'system.admin.inc',
    'file path' => drupal_get_path('module', 'system'),
  );

  $items['admin/config/cap/details'] = array(
    'title' => 'Details',
    'description' => "Displays information about the site's connection to the CAP API.",
    'page callback' => 'drupal_get_form',
    'page arguments' => array('stanford_cap_api_details_form'),
    // @todo Proper access check.
    'access callback' => TRUE,
    'weight' => -10,
    'file' => 'stanford_cap_api.admin.inc',
  );

  $items['admin/config/cap/settings'] = array(
    'title' => 'Settings',
    'description' => 'Provides administrators ability to change CAP API access settings.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('stanford_cap_api_settings_form'),
    // @todo Proper access check.
    'access callback' => TRUE,
    'weight' => 10,
    'file' => 'stanford_cap_api.admin.inc',
  );

  $items['admin/config/cap/import'] = array(
    'title' => 'Import profiles',
    'description' => 'Provides administrators ability to import CAP profiles.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('stanford_cap_api_import_form'),
    // @todo Proper access check.
    'access callback' => TRUE,
    'weight' => 5,
    'file' => 'stanford_cap_api.admin.inc',
  );

  $items['admin/config/cap/import/result'] = array(
    'title' => 'Import profiles',
    'description' => 'Provides administrators ability to import CAP profiles.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('stanford_cap_api_import_result_form'),
    // @todo Proper access check.
    'access callback' => TRUE,
    'file' => 'stanford_cap_api.admin.inc',
  );

  $items['admin/config/cap/profile_test'] = array(
    'title' => 'Faculty Profile Structure Synchronization',
    'description' => 'Faculty Profile Structure Synchronization',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('stanford_cap_api_profile_test'),
    // @todo Proper access check.
    'access callback' => TRUE,
    'file' => 'stanford_cap_api.admin.inc',
  );

  $items['admin/config/cap/manage'] = array(
    'title' => 'Manage profiles',
    'description' => 'Provides administrators ability to manage CAP profiles.',
    'page callback' => 'stanford_cap_api_manage',
    // @todo Proper access check.
    'access callback' => TRUE,
    'weight' => 6,
    'file' => 'stanford_cap_api.admin.inc',
  );

  return $items;
}

/**
 * Synchronize fields from CAP profile to Drupal.
 *
 * @param array $profile
 *   CAP profile.
 */
function stanford_cap_api_synchronize_fields(&$profile) {

  $drupal_fields = array();
  foreach ($profile as $field_name => &$field_data) {
    $node_field_name = 'cap_' . strtolower($field_name);
    // Saving field name for further usage.
    $drupal_fields[$node_field_name] = $field_name;
    $field_info = field_info_field($node_field_name);
    // Field not exists yet.
    if (empty($field_info)) {

      // @todo Here we should grab field metadata from JSON schema.
      $field_type = _tmp_cap_api_get_field_type($field_name);
      $field_info = _cap_api_get_field_base_def($field_type, $node_field_name);
      // Do we know about this field type?
      if (!empty($field_info)) {
        field_create_field($field_info);
        // Logging field creation.
        _cap_api_log_field($node_field_name);
        // @todo Check if field is a collection. Create sub-fields.
        if ($field_type == 'field_collection' && is_array($field_data) && !empty($field_data)) {
          $subfields = array_shift($field_data);
          foreach ($subfields as $subfield => $subfield_data) {
            $fc_field_name = _stanford_cap_api_get_subfield_name($subfield);
            $subfield_type = _tmp_cap_api_get_field_type($subfield);
            $subfield_info = _cap_api_get_field_base_def($subfield_type, $fc_field_name);
            if (!empty($subfield_info)) {
              field_create_field($subfield_info);
              $sub_instance = _cap_api_get_field_subinstance_def($subfield_type, $fc_field_name, $subfield, $node_field_name);
              field_create_instance($sub_instance);
            }
          }
        }
        $field_instance = field_info_instance('node', $node_field_name, 'cap_faculty_profile');
        if (empty($field_instance)) {
          // @todo Grab field label from JSON schema.
          $instance = _cap_api_get_field_instance_def($field_type, $node_field_name, $field_name);
          field_create_instance($instance);
          // @todo Check if field is a collection. Create sub-fields.
        }
      }
    }
  }
  // Saving mapping of original fields to Drupal fields.
  $profile['drupal_fields'] = $drupal_fields;
}

/**
 * Returns Drupal base field definition based of JSON field type.
 */
function _cap_api_get_field_base_def($type, $name) {
  $info = FALSE;
  switch ($type) {
    case 'link':
      $info = array(
        'active' => 1,
        'cardinality' => 1,
        'deleted' => 0,
        'entity_types' => array(),
        'field_name' => $name,
        'foreign keys' => array(),
        'indexes' => array(),
        'locked' => 0,
        'module' => 'link',
        'settings' => array(
          'attributes' => array(
            'class' => '',
            'rel' => '',
            'target' => 'default',
          ),
          'display' => array(
            'url_cutoff' => 80,
          ),
          'enable_tokens' => 1,
          'title' => 'optional',
          'title_maxlength' => 128,
          'title_value' => '',
          'url' => 0,
        ),
        'translatable' => 0,
        'type' => 'link_field',
      );
      break;

    case 'date':
      $info = array(
        'active' => 1,
        'cardinality' => 1,
        'deleted' => 0,
        'entity_types' => array(),
        'field_name' => $name,
        'foreign keys' => array(),
        'indexes' => array(),
        'locked' => 0,
        'module' => 'date',
        'settings' => array(
          'cache_count' => 4,
          'cache_enabled' => 0,
          'granularity' => array(
            'day' => 'day',
            'hour' => 0,
            'minute' => 0,
            'month' => 'month',
            'second' => 0,
            'year' => 'year',
          ),
          'timezone_db' => '',
          'todate' => '',
          'tz_handling' => 'none',
        ),
        'translatable' => 0,
        'type' => 'datestamp',
      );
      break;

    case 'string':
      $info = array(
        'active' => 1,
        'cardinality' => 1,
        'deleted' => 0,
        'entity_types' => array(),
        'field_name' => $name,
        'foreign keys' => array(
          'format' => array(
            'columns' => array(
              'format' => 'format',
            ),
            'table' => 'filter_format',
          ),
        ),
        'indexes' => array(
          'format' => array(
            0 => 'format',
          ),
        ),
        'locked' => 0,
        'module' => 'text',
        'settings' => array(
          'max_length' => 255,
        ),
        'translatable' => 0,
        'type' => 'text',
      );
      break;

    case 'string_multiply':
      $info = array(
        'active' => 1,
        'cardinality' => -1,
        'deleted' => 0,
        'entity_types' => array(),
        'field_name' => $name,
        'foreign keys' => array(
          'format' => array(
            'columns' => array(
              'format' => 'format',
            ),
            'table' => 'filter_format',
          ),
        ),
        'indexes' => array(
          'format' => array(
            0 => 'format',
          ),
        ),
        'locked' => 0,
        'module' => 'text',
        'settings' => array(
          'max_length' => 255,
        ),
        'translatable' => 0,
        'type' => 'text',
      );
      break;

    case 'text':
      $info = array(
        'active' => 1,
        'cardinality' => 1,
        'deleted' => 0,
        'entity_types' => array(),
        'field_name' => $name,
        'foreign keys' => array(
          'format' => array(
            'columns' => array(
              'format' => 'format',
            ),
            'table' => 'filter_format',
          ),
        ),
        'indexes' => array(
          'format' => array(
            0 => 'format',
          ),
        ),
        'locked' => 0,
        'module' => 'text',
        'settings' => array(),
        'translatable' => 0,
        'type' => 'text_long',
      );
      break;

    case 'integer':
      $info = array(
        'active' => 1,
        'cardinality' => 1,
        'deleted' => 0,
        'entity_types' => array(),
        'field_name' => $name,
        'foreign keys' => array(),
        'indexes' => array(),
        'locked' => 0,
        'module' => 'number',
        'settings' => array(),
        'translatable' => 0,
        'type' => 'number_integer',
      );
      break;

    case 'field_collection':
      $info = array(
        'active' => 1,
        'cardinality' => -1,
        'deleted' => 0,
        'entity_types' => array(),
        'field_name' => $name,
        'foreign keys' => array(),
        'indexes' => array(),
        'locked' => 0,
        'module' => 'field_collection',
        'settings' => array(
          'hide_blank_items' => 1,
          'path' => '',
        ),
        'translatable' => 0,
        'type' => 'field_collection',
      );
      break;

    case 'boolean':
      $info = array(
        'active' => 1,
        'cardinality' => 1,
        'deleted' => 0,
        'entity_types' => array(),
        'field_name' => $name,
        'foreign keys' => array(),
        'indexes' => array(
          'value' => array(
            0 => 'value',
          ),
        ),
        'locked' => 0,
        'module' => 'list',
        'settings' => array(
          'allowed_values' => array(
            0 => '',
            1 => '',
          ),
          'allowed_values_function' => '',
        ),
        'translatable' => 0,
        'type' => 'list_boolean',
      );
      break;
  }

  return $info;
}

/**
 * Generates instance info for profile fields.
 *
 * @param $type
 * @param $name
 * @param $label
 *
 * @return array|FALSE
 */
function _cap_api_get_field_instance_def($type, $name, $label) {
  $info = FALSE;
  $label = check_plain($label);
  switch ($type) {
    case 'link':
      $info = array(
        'bundle' => 'cap_faculty_profile',
        'default_value' => NULL,
        'deleted' => 0,
        'description' => '',
        'display' => array(
          'default' => array(
            'label' => 'above',
            'module' => 'link',
            'settings' => array(),
            'type' => 'link_default',
            'weight' => 4,
          ),
          'teaser' => array(
            'label' => 'above',
            'settings' => array(),
            'type' => 'hidden',
            'weight' => 0,
          ),
        ),
        'entity_type' => 'node',
        'field_name' => $name,
        'label' => $label,
        'required' => 0,
        'settings' => array(
          'attributes' => array(
            'class' => '',
            'configurable_title' => 0,
            'rel' => '',
            'target' => 'default',
            'title' => '',
          ),
          'display' => array(
            'url_cutoff' => 80,
          ),
          'enable_tokens' => 1,
          'rel_remove' => 'default',
          'title' => 'none',
          'title_maxlength' => 128,
          'title_value' => '',
          'url' => 0,
          'user_register_form' => FALSE,
          'validate_url' => 1,
        ),
        'widget' => array(
          'active' => 0,
          'module' => 'link',
          'settings' => array(),
          'type' => 'link_field',
          'weight' => 44,
        ),
      );
      break;

    case 'date':
      $info = array(
        'bundle' => 'cap_faculty_profile',
        'default_value' => NULL,
        'deleted' => 0,
        'description' => '',
        'display' => array(
          'default' => array(
            'label' => 'above',
            'module' => 'date',
            'settings' => array(
              'format_type' => 'long',
              'fromto' => 'both',
              'multiple_from' => '',
              'multiple_number' => '',
              'multiple_to' => '',
            ),
            'type' => 'date_default',
            'weight' => 1,
          ),
          'stanford_cap_instructor' => array(
            'label' => 'above',
            'settings' => array(),
            'type' => 'hidden',
            'weight' => 0,
          ),
          'teaser' => array(
            'label' => 'above',
            'settings' => array(),
            'type' => 'hidden',
            'weight' => 0,
          ),
        ),
        'entity_type' => 'node',
        'field_name' => $name,
        'label' => $label,
        'required' => 0,
        'settings' => array(
          'default_value' => 'now',
          'default_value2' => 'same',
          'default_value_code' => '',
          'default_value_code2' => '',
          'user_register_form' => FALSE,
        ),
        'widget' => array(
          'active' => 1,
          'module' => 'date',
          'settings' => array(
            'display_all_day' => 0,
            'increment' => 15,
            'input_format' => 'm/d/Y - H:i:s',
            'input_format_custom' => '',
            'label_position' => 'above',
            'text_parts' => array(),
            'year_range' => '-3:+3',
          ),
          'type' => 'date_select',
          'weight' => 41,
        ),
      );
      break;

    case 'string':
    case 'string_multiply':
      $info = array(
        'bundle' => 'cap_faculty_profile',
        'default_value' => NULL,
        'deleted' => 0,
        'description' => '',
        'display' => array(
          'default' => array(
            'label' => 'above',
            'module' => 'text',
            'settings' => array(),
            'type' => 'text_default',
            'weight' => 2,
          ),
          'teaser' => array(
            'label' => 'above',
            'settings' => array(),
            'type' => 'hidden',
            'weight' => 0,
          ),
        ),
        'entity_type' => 'node',
        'field_name' => $name,
        'label' => $label,
        'required' => 0,
        'settings' => array(
          'text_processing' => 0,
          'user_register_form' => FALSE,
        ),
        'widget' => array(
          'active' => 1,
          'module' => 'text',
          'settings' => array(
            'size' => 60,
          ),
          'type' => 'text_textfield',
          'weight' => 42,
        ),
      );
      break;

    case 'text':
      $info = array(
        'bundle' => 'cap_faculty_profile',
        'default_value' => NULL,
        'deleted' => 0,
        'description' => '',
        'display' => array(
          'default' => array(
            'label' => 'above',
            'module' => 'text',
            'settings' => array(),
            'type' => 'text_default',
            'weight' => 5,
          ),
          'teaser' => array(
            'label' => 'above',
            'settings' => array(),
            'type' => 'hidden',
            'weight' => 0,
          ),
        ),
        'entity_type' => 'node',
        'field_name' => $name,
        'label' => $label,
        'required' => 0,
        'settings' => array(
          'text_processing' => 0,
          'user_register_form' => FALSE,
        ),
        'widget' => array(
          'active' => 1,
          'module' => 'text',
          'settings' => array(
            'rows' => 5,
          ),
          'type' => 'text_textarea',
          'weight' => 45,
        ),
      );
      break;

    case 'integer':
      $info = array(
        'bundle' => 'cap_faculty_profile',
        'default_value' => NULL,
        'deleted' => 0,
        'description' => '',
        'display' => array(
          'default' => array(
            'label' => 'above',
            'module' => 'number',
            'settings' => array(
              'decimal_separator' => '.',
              'prefix_suffix' => TRUE,
              'scale' => 0,
              'thousand_separator' => ' ',
            ),
            'type' => 'number_integer',
            'weight' => 1,
          ),
          'teaser' => array(
            'label' => 'above',
            'settings' => array(),
            'type' => 'hidden',
            'weight' => 0,
          ),
        ),
        'entity_type' => 'node',
        'field_name' => $name,
        'label' => $label,
        'required' => 0,
        'settings' => array(
          'max' => '',
          'min' => '',
          'prefix' => '',
          'suffix' => '',
          'user_register_form' => FALSE,
        ),
        'widget' => array(
          'active' => 0,
          'module' => 'number',
          'settings' => array(),
          'type' => 'number',
          'weight' => 10,
        ),
      );
      break;

    case 'boolean':
      $info = array(
        'bundle' => 'cap_faculty_profile',
        'default_value' => array(
          0 => array(
            'value' => 0,
          ),
        ),
        'deleted' => 0,
        'description' => '',
        'display' => array(
          'default' => array(
            'label' => 'above',
            'module' => 'list',
            'settings' => array(),
            'type' => 'list_default',
          ),
          'teaser' => array(
            'label' => 'above',
            'settings' => array(),
            'type' => 'hidden',
          ),
        ),
        'entity_type' => 'node',
        'field_name' => $name,
        'label' => $label,
        'required' => 0,
        'settings' => array(
          'user_register_form' => FALSE,
        ),
        'widget' => array(
          'active' => 1,
          'module' => 'options',
          'settings' => array(
            'display_label' => 1,
          ),
          'type' => 'options_onoff',
        ),
      );
      break;
  }

  return $info;
}

/**
 * Generates instance info for field collection sub fields.
 *
 * @param $type
 * @param $name
 * @param $label
 * @param $fc_field
 *
 * @return array|FALSE
 */
function _cap_api_get_field_subinstance_def($type, $name, $label, $fc_field) {
  $info = FALSE;
  $label = check_plain($label);
  switch ($type) {
    case 'link':
      $info = array(
        'bundle' => $fc_field,
        'default_value' => NULL,
        'deleted' => 0,
        'description' => '',
        'display' => array(
          'default' => array(
            'label' => 'above',
            'module' => 'link',
            'settings' => array(),
            'type' => 'link_default',
          ),
        ),
        'entity_type' => 'field_collection_item',
        'field_name' => $name,
        'label' => $label,
        'required' => 0,
        'settings' => array(
          'attributes' => array(
            'class' => '',
            'configurable_title' => 0,
            'rel' => '',
            'target' => 'default',
            'title' => '',
          ),
          'display' => array(
            'url_cutoff' => 80,
          ),
          'enable_tokens' => 1,
          'rel_remove' => 'default',
          'title' => 'none',
          'title_maxlength' => 128,
          'title_value' => '',
          'url' => 0,
          'user_register_form' => FALSE,
          'validate_url' => 1,
        ),
        'widget' => array(
          'active' => 0,
          'module' => 'link',
          'settings' => array(),
          'type' => 'link_field',
        ),
      );
      break;

    case 'date':
      $info = array(
        'bundle' => $fc_field,
        'deleted' => 0,
        'description' => '',
        'display' => array(
          'default' => array(
            'label' => 'above',
            'module' => 'date',
            'settings' => array(
              'format_type' => 'long',
              'fromto' => 'both',
              'multiple_from' => '',
              'multiple_number' => '',
              'multiple_to' => '',
            ),
            'type' => 'date_default',
          ),
        ),
        'entity_type' => 'field_collection_item',
        'field_name' => $name,
        'label' => $label,
        'required' => 0,
        'settings' => array(
          'default_value' => 'now',
          'default_value2' => 'same',
          'default_value_code' => '',
          'default_value_code2' => '',
          'user_register_form' => FALSE,
        ),
        'widget' => array(
          'active' => 1,
          'module' => 'date',
          'settings' => array(
            'increment' => 15,
            'input_format' => 'm/d/Y - H:i:s',
            'input_format_custom' => '',
            'label_position' => 'above',
            'text_parts' => array(),
            'year_range' => '-3:+3',
          ),
          'type' => 'date_select',
        ),
      );
      break;

    case 'string':
    case 'string_multiply':
      $info = array(
        'bundle' => $fc_field,
        'default_value' => NULL,
        'deleted' => 0,
        'description' => '',
        'display' => array(
          'default' => array(
            'label' => 'above',
            'module' => 'text',
            'settings' => array(),
            'type' => 'text_default',
          ),
          'teaser' => array(
            'label' => 'above',
            'settings' => array(),
            'type' => 'hidden',
          ),
        ),
        'entity_type' => 'node',
        'field_name' => $name,
        'label' => $label,
        'required' => 0,
        'settings' => array(
          'text_processing' => 0,
          'user_register_form' => FALSE,
        ),
        'widget' => array(
          'active' => 1,
          'module' => 'text',
          'settings' => array(
            'size' => 60,
          ),
          'type' => 'text_textfield',
        ),
      );
      break;

    case 'text':
      $info = array(
        'bundle' => $fc_field,
        'default_value' => NULL,
        'deleted' => 0,
        'description' => '',
        'display' => array(
          'default' => array(
            'label' => 'above',
            'module' => 'text',
            'settings' => array(),
            'type' => 'text_default',
          ),
          'teaser' => array(
            'label' => 'above',
            'settings' => array(),
            'type' => 'hidden',
          ),
        ),
        'entity_type' => 'node',
        'field_name' => $name,
        'label' => $label,
        'required' => 0,
        'settings' => array(
          'text_processing' => 0,
          'user_register_form' => FALSE,
        ),
        'widget' => array(
          'active' => 1,
          'module' => 'text',
          'settings' => array(
            'rows' => 5,
          ),
          'type' => 'text_textarea',
        ),
      );
      break;

    case 'integer':
      $info = array(
        'bundle' => $fc_field,
        'default_value' => NULL,
        'deleted' => 0,
        'description' => '',
        'display' => array(
          'default' => array(
            'label' => 'above',
            'module' => 'number',
            'settings' => array(
              'decimal_separator' => '.',
              'prefix_suffix' => TRUE,
              'scale' => 0,
              'thousand_separator' => ' ',
            ),
            'type' => 'number_integer',

          ),
          'teaser' => array(
            'label' => 'above',
            'settings' => array(),
            'type' => 'hidden',
          ),
        ),
        'entity_type' => 'node',
        'field_name' => $name,
        'label' => $label,
        'required' => 0,
        'settings' => array(
          'max' => '',
          'min' => '',
          'prefix' => '',
          'suffix' => '',
          'user_register_form' => FALSE,
        ),
        'widget' => array(
          'active' => 0,
          'module' => 'number',
          'settings' => array(),
          'type' => 'number',
        ),
      );
      break;

    case 'boolean':
      $info = array(
        'bundle' => $fc_field,
        'default_value' => array(
          0 => array(
            'value' => 0,
          ),
        ),
        'deleted' => 0,
        'description' => '',
        'display' => array(
          'default' => array(
            'label' => 'above',
            'module' => 'list',
            'settings' => array(),
            'type' => 'list_default',
          ),
          'teaser' => array(
            'label' => 'above',
            'settings' => array(),
            'type' => 'hidden',
          ),
        ),
        'entity_type' => 'node',
        'field_name' => $name,
        'label' => $label,
        'required' => 0,
        'settings' => array(
          'user_register_form' => FALSE,
        ),
        'widget' => array(
          'active' => 1,
          'module' => 'options',
          'settings' => array(
            'display_label' => 1,
          ),
          'type' => 'options_onoff',
        ),
      );
      break;
  }

  return $info;
}

function _cap_api_log_field($field_name) {
  $record = array('field_name' => $field_name);
  drupal_write_record('cap_api_fields', $record);
  watchdog('stanford_cap_api', 'Field @field was created by stanford_cap_api module.', array('@field' => $field_name));
}

/**
 * Implements hook_menu_alter().
 */
function stanford_cap_api_menu_alter(&$items) {
  $items['node/%node/edit']['access callback'] = 'stanford_cap_api_node_access';
  $items['admin/structure/types/manage/%node_type/fields']['access callback'] = 'stanford_cap_api_user_access';
  $items['admin/structure/types/manage/%node_type/fields']['access arguments'][] = 4;
}

/**
 * Access check callback.
 */
function stanford_cap_api_node_access($op, $node) {
  $access = node_access($op, $node);
  if ($access && $node->type == 'cap_faculty_profile') {
    if (!variable_get('cap_allow_edit', FALSE)) {
      $access = FALSE;
    }
  }

  return $access;
}

/**
 * Access check callback.
 */
function stanford_cap_api_user_access($permission, $node_type) {
  $access = user_access($permission);
  if ($access && $node_type->type == 'cap_faculty_profile') {
    if (!variable_get('cap_custom_fields', FALSE)) {
      $access = FALSE;
    }
  }

  return $access;
}

/**
 * Authenticate with CAP and return an authentication token.
 *
 * @param string $user
 *   User name to use to authenticate in CAP API instead of saved one.
 * @param string $pass
 *   Password to use to authenticate in CAP API instead of saved one.
 *
 * @return string|FALSE
 *   An authentication token that can be used for API calls or FALSE.
 */
function stanford_cap_api_auth($user = '', $pass = '') {

  $auth_uri = variable_get('cap_auth_uri', 'https://authz-test.stanford.edu/oauth/token');
  $user = empty($user) ? variable_get('cap_username', '') : $user;
  $pass = empty($pass) ? variable_get('cap_password', '') : $pass;

  $params = array(
    'grant_type' => 'client_credentials',
    'scope' => 'profiles.read_public',
  );

  if (empty($user) || empty($pass)) {
    return FALSE;
  }

  // Append user/pass, some system doesn't support http_build_url.
  $uri = parse_url($auth_uri);

  $host = $user . ':' . $pass . '@' . $uri['host'];
  $auth_url = str_replace($uri['host'], $host, $auth_uri);

  $auth_url = url($auth_url, array('query' => $params, 'external' => TRUE));
  $response = drupal_http_request($auth_url);
  // Error could be here as well.
  if (property_exists($response, 'error')) {
    $error_msg = 'Failed to fetch data from CAP API service. Error code is'
      . ' %code, error message is "%msg", request string was "%request".';
    $vars = array(
      '%code' => $response->code,
      '%msg' => $response->status_message,
      '%request' => $response->request,
    );
    watchdog('stanford_cap_api', $error_msg, $vars, WATCHDOG_WARNING);

    return FALSE;
  }

  // Log bad API authentication.
  $data = json_decode($response->data, TRUE);
  if (array_key_exists('error', $data)) {
    $error_msg = 'Error found in CAP API response. Error message is "%msg",'
      . ' response data was "%data".';
    $vars = array(
      '%msg' => $data['error_description'],
      '%data' => print_r($data, TRUE),
    );
    watchdog('stanford_cap_api', $error_msg, $vars, WATCHDOG_WARNING);

    return FALSE;
  }

  // Authentication successful, return the access token.
  if (array_key_exists('access_token', $data)) {
    return $data['access_token'];
  }

  return FALSE;
}

/**
 * Issue an API call against an API endpoint.
 */
function stanford_cap_api_request($endpoint, $params = array()) {
  // Real endpoint is "http://irt-dev.stanford.edu/cap-api"
  $api_base = variable_get('cap_api_base_url', 'http://irt-dev.stanford.edu/cap-api');

  $access_token = stanford_cap_api_auth();
  // Unable to fetch an auth token.
  if (!$access_token) {
    return FALSE;
  }

  $query = array(
    'access_token' => $access_token,
  );

  $request_url = url($api_base . $endpoint, array(
    'query' => $params += $query,
    'external' => TRUE,
  ));

  $response = drupal_http_request($request_url);
  // Error could be here as well.
  if (property_exists($response, 'error')) {
    $error_msg = 'Failed to fetch data from CAP API service. Error code is'
      . ' %code, error message is "%msg", request string was "%request".';
    $vars = array(
      '%code' => $response->code,
      '%msg' => $response->status_message,
      '%request' => $response->request,
    );
    watchdog('stanford_cap_api', $error_msg, $vars, WATCHDOG_WARNING);

    return FALSE;
  }

  // Log bad API authentication.
  $data = json_decode($response->data, TRUE);
  if (array_key_exists('error', $data)) {
    $error_msg = 'Error found in CAP API response. Error message is "%msg",'
      . ' response data was "%data".';
    $vars = array(
      '%msg' => $data['error_description'],
      '%data' => print_r($data, TRUE),
    );
    watchdog('stanford_cap_api', $error_msg, $vars, WATCHDOG_WARNING);

    return FALSE;
  }
  else {
    return $data;
  }
}

function stanford_cap_api_test() {
  $endpoint = '/api/cap/v1/orgs';
  $params = array('orgCodes' => 'VAAA');

  $response = stanford_cap_api_request($endpoint, $params);
  dpm($response, 'Raw response');
}

/**
 * Save organization fetch from CAP API.
 *
 * @param array $organization
 *   Array containing organization description.
 * @param int $orgid
 *   Organization ID inside Stanford University. Could be 0 for root entry,
 * Stanford University itself.
 */
function stanford_cap_api_save_organization($organization, $orgid = 0) {
  $organization['orgid'] = $orgid;
  if (isset($organization['children'])) {
    $childrens = $organization['children'];
    $childrens_id = array();
    foreach ($childrens as $orgid => $org) {
      $childrens_id[] = $orgid;
      stanford_cap_api_save_organization($org, $orgid);
    }
    $organization['children'] = $childrens_id;
  }
  drupal_write_record('cap_api_orgs', $organization);
}

/**
 * Imports organizations from CAP API.
 *
 * Organizations have tree structure. To import them we must specify top level
 * organization code. This can be code of root entry - Stanford University(AA00)
 * itself, or code of one of departments, like School of Medicine(VAAA).
 *
 * @param string $top
 *   Top level organization code.
 */
function stanford_cap_api_import_organizations($top = 'AA00') {
  db_delete('cap_api_orgs')->execute();
  // Organizations endpoint.
  $endpoint = '/api/cap/v1/orgs';
  $params = array('orgCodes' => $top);
  $data = stanford_cap_api_request($endpoint, $params);
  foreach ($data as $orgid => $organization) {
    stanford_cap_api_save_organization($organization, $orgid);
  }
}

/**
 * Implements hook_cron().
 */
function stanford_cap_api_cron() {
  $last_run_time = variable_get('stanford_cap_api_cron_last_run', 0);
  $time_since_last_run = REQUEST_TIME - $last_run_time;
  // Check if last run was more then one day ago.
  if ($time_since_last_run > 86400) {
    stanford_cap_api_import_organizations();
    stanford_cap_api_update_profiles();
    // Update execution time.
    variable_set('stanford_cap_api_cron_last_run', REQUEST_TIME);
  }
}

/**
 * Import CAP profile.
 *
 * @param int $profile_id
 *   Profile ID.
 */
function stanford_cap_api_profile_import($profile_id) {
  if (isset($_SESSION['search_response']['values'])) {
    foreach ($_SESSION['search_response']['values'] as $profile) {
      if ($profile['profileId'] == $profile_id) {
        stanford_cap_api_synchronize_fields($profile);
        stanford_cap_api_profile_sync($profile);
      }
    }
  }
  else {
    $profile = stanford_cap_api_request('/api/profiles/v1/' . $profile_id);
    if ($profile) {
      stanford_cap_api_synchronize_fields($profile);
      stanford_cap_api_profile_sync($profile);
    }
    else {
      $message = 'There is no profile with ID %id in Stanford CAP Network.';
      watchdog('stanford_cap_api', $message, array('%id' => $profile_id));
    }
  }
}

function stanford_cap_api_import_result_finished() {
  drupal_set_message(t('Profiles imported!'));
  unset($_SESSION['search_params']);
  unset($_SESSION['search_response']);
  drupal_goto('admin/config/cap/import');
}

/**
 * Introduce field type while we have no JSON schema.
 *
 * @todo Drop as we will get access to JSON schema.
 */
function _tmp_cap_api_get_field_type($field_name) {
  $type = FALSE;
  switch ($field_name) {
    case 'displayName':
    case 'longTitle':
    case 'uid':
    case 'californiaPhysicianLicense':
    case 'name':
    case 'appointment':
    case 'organization':
    case 'fullName':
    case 'alias':
      $type = 'string';
      break;

    case 'clinicalFocus':
      $type = 'string_multiply';
      break;

    case 'profileUrl':
      $type = 'link';
      break;

    case 'capFaculty':
    case 'capStaff':
    case 'capPostdoc':
    case 'capMdStudent':
    case 'capMsStudent':
    case 'capPhdStudent':
    case 'physician':
      $type = 'boolean';
      break;

    case 'lastModified':
    case 'startYear':
    case 'endYear':
      $type = 'date';
      break;

    case 'profileId':
    case 'ordinal':
      $type = 'integer';
      break;

    case 'honorsAndAwards':
    case 'professionalInterests':
    case 'currentRoleAtStanford':
    case 'bio':
      $type = 'text';
      break;

    case 'activeAffiliations':
    case 'administrativeAppointments':
    case 'advisees':
    case 'affiliations':
      $type = 'field_collection';
      break;
  }

  return $type;
}

/**
 * Generates CAP network profile URL.
 *
 * @todo Remove this when appropriate field would be available.
 *
 * @param array $profile
 *   CAP network profile.
 *
 * @return string
 *   CAP network profile URL.
 */
function _cap_api_format_cap_profile_url($profile) {
  $href = 'https://med.stanford.edu/profiles/';
  if (!empty($profile['names']['legal'])) {
    $href .= 'stanford/';
    $href .= $profile['names']['legal']['firstName'];
    $href .= '_' . $profile['names']['legal']['lastName'];
  }
  elseif (!empty($profile['names']['preferred'])) {
    $href .= 'stanford/';
    $href .= $profile['names']['preferred']['firstName'];
    $href .= '_' . $profile['names']['preferred']['lastName'];
  }

  return $href;
}

/**
 * Synchronize CAP network profile with Drupal node.
 *
 * @param array $profile
 *   CAP network profile.
 */
function stanford_cap_api_profile_sync($profile) {
  $query = new EntityFieldQuery();
  $result = $query->entityCondition('entity_type', 'node')
    ->entityCondition('bundle', 'cap_faculty_profile')
    ->fieldCondition('cap_profileid', 'value', $profile['profileId'])
    ->execute();
  if (count($result['node']) == 1) {
    $node = array_shift($result['node']);
    $node = node_load($node->nid);
    stanford_cap_api_node_fields_update($node, $profile);
  }
  elseif (count($result['node']) > 1) {
    // More then 1 node contains this profile's ID, error?
    // @todo Add more description.
    watchdog('stanford_cap_api', 'Error! More than one node per profile.');
  }
  else {
    // Importing.
    $node = new stdClass();
    $node->title = $profile['displayName'];
    $node->uid = 0;
    $node->status = 1;
    $node->type = 'cap_faculty_profile';
    $node->created = REQUEST_TIME;
    $node->changed = REQUEST_TIME;
    $node->is_new = TRUE;
    $node->language = LANGUAGE_NONE;
    node_save($node);
    $node = node_load($node->nid, NULL, TRUE);
    stanford_cap_api_node_fields_update($node, $profile);
  }
}

/**
 * Sync profile fields to node.
 *
 * @param $node
 * @param $profile
 */
function stanford_cap_api_node_fields_update($node, $profile) {
  $nw = entity_metadata_wrapper('node', $node);
  $drupal_fields = db_select('cap_api_fields', 'f')
    ->fields('f', array('field_name'))
    ->execute()->fetchCol();
  foreach ($drupal_fields as $drupal_field) {
    $profile_field = $profile['drupal_fields'][$drupal_field];
    // @todo We must have some kind a field handlers to fetch data from profile fields.
    if (!empty($profile[$profile_field])) {
      switch ($profile_field) {
        case 'displayName':
        case 'uid':
        case 'bio':
        case 'currentRoleAtStanford':
        case 'profileId':
        case 'professionalInterests':
        case 'californiaPhysicianLicense':
          $nw->{$drupal_field}->set($profile[$profile_field]);
          break;

        case 'lastModified':
          $nw->{$drupal_field}->set(strtotime($profile[$profile_field]));
          break;

        case 'honorsAndAwards':
          $value = '';
          foreach ($profile[$profile_field] as $award) {
            $value .= $award['label']['html'];
            $value .= "\n";
          }
          $nw->{$drupal_field}->set($value);
          break;

        case 'longTitle':
          $nw->{$drupal_field}->set($profile[$profile_field]['title']);
          break;

        // Type - string_multiply.
        case 'clinicalFocus':
          $values = array();
          foreach ($profile[$profile_field] as $field) {
            $values[] = $field;
          }
          $nw->{$drupal_field}->set($values);
          break;

        case 'administrativeAppointments':
          $fc_item = entity_create('field_collection_item', array('field_name' => $drupal_field));
          $fc_item->setHostEntity('node', $node);
          $fc_wrapper = entity_metadata_wrapper('field_collection_item', $fc_item);
          foreach ($profile[$profile_field] as $subfield => $data) {
            $fc_field_name = _stanford_cap_api_get_subfield_name($subfield);
            $fc_wrapper->field_source_txt_content->set($data);
            _stanford_cap_api_node_fields_update_subfields($fc_wrapper, $subfield, $data);
          }

          // Saving field collection but not host entity.
          $fc_wrapper->save(TRUE);

          break;
      }
    }
  }
  $nw->cap_profile_link->set(array('url' => _cap_api_format_cap_profile_url($profile)));
  $nw->cap_sync_date->set(REQUEST_TIME);
  $nw->save();
}

/**
 * Convert profile subfield name to drupal subfield name.
 *
 * @param $subfield
 *
 * @return string
 */
function _stanford_cap_api_get_subfield_name($subfield) {
  return 'cap_fc_' . strtolower($subfield);
}

/**
 * Import multiply CAP profiles.
 *
 * @param array $profile_ids
 *   Array of profile ID's.
 */
function stanford_cap_api_profile_import_multiply($profile_ids) {
  $params = array(
    'ids' => implode(',', $profile_ids),
    'ps' => count($profile_ids),
  );
  $profiles = stanford_cap_api_request('/api/profiles/v1', $params);
  foreach ($profiles['values'] as $profile) {
    stanford_cap_api_synchronize_fields($profile);
    stanford_cap_api_profile_sync($profile);
  }
  $message = 'Successfully imported %count profiles from Stanford CAP Network.';
  watchdog('stanford_cap_api', $message, array('%count' => $profiles['count']));
}

/**
 * Updates already imported profiles.
 */
function stanford_cap_api_update_profiles() {
  $query = new EntityFieldQuery();
  $result = $query->entityCondition('entity_type', 'node')
    ->entityCondition('bundle', 'cap_faculty_profile')
    ->fieldCondition('cap_profileid', 'value', '', '<>')
    ->execute();
  if (count($result['node'])) {
    $nids = array_keys($result['node']);
    $nodes = node_load_multiple($nids);
    $profile_ids = array();
    foreach ($nodes as $node) {
      $nw = entity_metadata_wrapper('node', $node);
      $profile_ids[] = $nw->cap_profileid->value();
    }
    stanford_cap_api_profile_import_multiply($profile_ids);
  }
}

function cap_api_schema_test() {
  $product = file_get_contents(drupal_get_path('module', 'stanford_cap_api') . '/profile.json');
  $product = json_decode($product);

  $product_schema = file_get_contents(drupal_get_path('module', 'stanford_cap_api') . '/profile_schema.json');
  $product_schema = json_decode($product_schema);
  dpm($product, 'Profile');
  dpm($product_schema, 'Profile schema');
}

/**
 * Updates fields of collections.
 *
 * @param $wrapper
 * @param $subfield
 * @param $data
 */
function _stanford_cap_api_node_fields_update_subfields(&$wrapper, $subfield, $data) {
  $fc_field_name = _stanford_cap_api_get_subfield_name($subfield);
  switch ($subfield) {
    // Default.
    case 'appointment':
    case 'organization':
      $wrapper->{$fc_field_name}->set($data);
      break;

    case 'startYear':
    case 'endYear':
      $wrapper->{$fc_field_name}->set(strtotime($data->value));
      break;

    case 'label':
      $wrapper->{$fc_field_name}->set($data->html);
      break;
  }
}
