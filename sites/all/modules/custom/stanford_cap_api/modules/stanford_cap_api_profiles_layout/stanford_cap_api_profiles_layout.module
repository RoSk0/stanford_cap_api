<?php
/**
 * @file
 * Code for the Stanford CAP API profiles layout feature.
 */

include_once 'stanford_cap_api_profiles_layout.features.inc';

/**
 * Implements hook_cron().
 */
function stanford_cap_api_profiles_layout_cron() {
  stanford_cap_api_profiles_layout_check_layout();
}

/**
 * Returns layout of profile from CAP API service.
 *
 * @return array
 *   Layout.
 */
function stanford_cap_api_profiles_layout_get() {
  $type = 'faculty';

  return stanford_cap_api_request('/api/cap/v1/layouts/' . $type);
}

function stanford_cap_api_profiles_layout_check_layout() {
  ctools_include('export');
  $modified = variable_get('stanford_cap_api_profiles_layout_modified');
  $layout = stanford_cap_api_profiles_layout_get();
  if (!empty($layout['headings']) && $layout['lastModified'] != $modified) {
    $weight = 0;
    foreach ($layout['headings'] as $heading) {
      // Creating filed_group for heading.
      $entity_type = 'node';
      $bundle = 'cap_faculty_profile';
      $group_name = _stanford_cap_api_profiles_generate_field_name($heading['name']);
      $label = $heading['name'];
      $mode = 'full';
      $children = array();

      $field_group = field_group_load_field_group($group_name, $entity_type, $bundle, $mode);
      if (!$field_group) {
        $field_group = (object) array(
          'identifier' => $group_name . '|' . $entity_type . '|' . $bundle . '|' . $mode,
          'group_name' => $group_name,
          'entity_type' => $entity_type,
          'bundle' => $bundle,
          'mode' => $mode,
          'children' => $children,
          'parent_name' => '',
          'weight' => $weight,
          'label' => $label,
          'format_type' => 'fieldset',
          'format_settings' => array(
            'formatter' => 'collapsible',
            'instance_settings' => array(
              'description' => '',
            ),
          ),
          'disabled' => FALSE,
        );
        $classes = _field_group_get_html_classes($field_group);
        $field_group->format_settings['instance_settings']['classes'] = implode(' ', $classes->optional);
        // Save and enable it in ctools.
        ctools_export_crud_save('field_group', $field_group);
        ctools_export_crud_enable('field_group', $field_group->identifier);
        $weight++;
      }

      // Creating field_group for sections.
      if (!empty($heading['sections'])) {
        $section_weight = 0;
        foreach ($heading['sections'] as $section) {
          if (!empty($section['displayFields'])) {
            $children[] = _stanford_cap_api_profiles_layout_create_sections($section, $group_name, $section_weight);
            $section_weight++;
          }
        }
      }
      // Function field_group_group_save() doesn't update original object on
      // save, so need to reload object to get it ID and avoid:
      // Integrity constraint violation: Duplicate entry for key 'identifier'.
      $field_group = field_group_load_field_group($group_name, $entity_type, $bundle, $mode);
      $field_group->children = $children;
      ctools_export_crud_save('field_group', $field_group);
    }
    variable_set('stanford_cap_api_profiles_layout_modified', $layout['lastModified']);
  }
}


function _stanford_cap_api_profiles_layout_create_sections($section, $heading_name, $weight) {

  $label = $section['name'];
  $parent = $heading_name;
  $mode = 'full';
  $bundle = 'cap_faculty_profile';
  $entity_type = 'node';
  $group_name = _stanford_cap_api_profiles_generate_field_name($section['name']);
  $children = array();
  $field_weight = 0;
  foreach ($section['displayFields'] as $field_path) {
    $field_info = _stanford_cap_api_profiles_layout_get_field_name_by_path($field_path);
    if (!empty($field_info)) {
      if (strpos($field_path, '.') === FALSE) {
        $children[] = $field_info['field_name'];
        $field_instance = field_info_instance($field_info['entity_type'], $field_info['field_name'], $field_info['bundle']);
        $field_instance['display'][$mode] = $field_instance['display']['default'];
      }
      else {
        $parts = explode('.', $field_path);
        $levels = count($parts);
        for ($i = 0; $i < $levels; $i++) {
          $field_info = _stanford_cap_api_profiles_layout_get_field_name_by_path(implode('.', $parts));
          $field_instance = field_info_instance($field_info['entity_type'], $field_info['field_name'], $field_info['bundle']);
          $field_instance['display'][$mode] = $field_instance['display']['default'];
          array_pop($parts);
        }
        $children[] = $field_info['field_name'];
      }
      $field_instance['display'][$mode]['weight'] = $field_weight;
      field_update_instance($field_info);
      $field_weight++;
    }
  }

  $field_group = field_group_load_field_group($group_name, $entity_type, $bundle, $mode);
  if (!$field_group) {
    $field_group = (object) array(
      'identifier' => $group_name . '|' . $entity_type . '|' . $bundle . '|' . $mode,
      'group_name' => $group_name,
      'entity_type' => $entity_type,
      'bundle' => $bundle,
      'mode' => $mode,
      'children' => $children,
      'parent_name' => $parent,
      'weight' => $weight,
      'label' => $label,
      'format_type' => 'fieldset',
      'format_settings' => array(
        'formatter' => 'collapsible',
        'instance_settings' => array(
          'description' => '',
        ),
      ),
      'disabled' => FALSE,
    );
    $classes = _field_group_get_html_classes($field_group);
    $field_group->format_settings['instance_settings']['classes'] = implode(' ', $classes->optional);
    // Save and enable it in ctools.
    ctools_export_crud_save('field_group', $field_group);
    ctools_export_crud_enable('field_group', $field_group->identifier);
  }

  return $group_name;
}

/**
 * Helper to get stored field info by field path from layout schema.
 *
 * @param string $field_path
 *   Field path from layout schema.
 *
 * @return array
 *   Stored field info.
 */
function _stanford_cap_api_profiles_layout_get_field_name_by_path($field_path) {
  return db_select('cap_api_fields_map', 'm')
    ->fields('m')
    ->condition('field_path', $field_path)
    ->execute()
    ->fetchAssoc();
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function stanford_cap_api_profiles_layout_form_stanford_cap_api_profiles_profile_test_alter(&$form) {
  $form['actions']['layout'] = array(
    '#type' => 'submit',
    '#value' => t('Update profiles layout'),
    '#submit' => array('stanford_cap_api_profiles_layout_check_layout'),
  );
}
