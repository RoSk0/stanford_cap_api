<?php
/**
 * @file
 * Code for the Stanford CAP Profile Displays feature.
 */

include_once 'stanford_cap_profile_displays.features.inc';

/**
 * Implements hook_entity_info_alter().
 *
 * Adds additional display modes to node.
 */
function stanford_cap_profile_displays_entity_info_alter(&$entity_info) {

  $display_modes = array(
    'profile_page' => array(
      'label' => t('Profile Page'),
      'custom settings' => TRUE,
    ),
    'profile_page_tabbed' => array(
      'label' => t('Tabbed Profile Page'),
      'custom settings' => TRUE,
    ),
  );

  $entity_info['node']['view modes'] += $display_modes;
  $entity_info['field_collection_item']['view modes'] += $display_modes;
}

/**
 * Implements hook_field_formatter_info().
 *
 * Creating duplicating formatter for field collections with applied patch #64
 * from #1276258.
 */
function stanford_cap_profile_displays_field_formatter_info() {
  return array(
    'cap_field_collection_view' => array(
      'label' => t('Field collection items(hide empty)'),
      'field types' => array('field_collection'),
      'settings' =>  array(
        'edit' => '',
        'delete' => '',
        'add' => '',
        'description' => FALSE,
        'view_mode' => 'full',
      ),
    ),
  );
}

/**
 * Implements hook_field_formatter_settings_form().
 */
function stanford_cap_profile_displays_field_formatter_settings_form($field, $instance, $view_mode, $form, &$form_state) {
  return field_collection_field_formatter_settings_form($field, $instance, $view_mode, $form, $form_state);
}

/**
 * Implements hook_field_formatter_settings_summary().
 */
function stanford_cap_profile_displays_field_formatter_settings_summary($field, $instance, $view_mode) {
  return field_collection_field_formatter_settings_summary($field, $instance, $view_mode);
}

/**
 * Implements hook_field_formatter_view().
 */
function stanford_cap_profile_displays_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, $items, $display) {
  $element = array();
  $settings = $display['settings'];

  switch ($display['type']) {
    case 'cap_field_collection_view':

      $view_mode = !empty($display['settings']['view_mode']) ? $display['settings']['view_mode'] : 'full';
      foreach ($items as $delta => $item) {
        if ($field_collection = field_collection_field_get_entity($item)) {
          $element[$delta]['entity'] = $field_collection->view($view_mode);
          $element[$delta]['#theme_wrappers'] = array('field_collection_view');
          $element[$delta]['#attributes']['class'][] = 'field-collection-view';
          $element[$delta]['#attributes']['class'][] = 'clearfix';
          $element[$delta]['#attributes']['class'][] = drupal_clean_css_identifier('view-mode-' . $view_mode);

          $links = array(
            '#theme' => 'links__field_collection_view',
          );
          $links['#attributes']['class'][] = 'field-collection-view-links';
          foreach (array('edit', 'delete') as $op) {
            if ($settings[$op] && field_collection_item_access($op == 'edit' ? 'update' : $op, $field_collection)) {
              $links['#links'][$op] = array(
                'title' => entity_i18n_string("field:{$field['field_name']}:{$instance['bundle']}:setting_$op", $settings[$op]),
                'href' => $field_collection->path() . '/' . $op,
                'query' => drupal_get_destination(),
              );
            }
          }
          $element[$delta]['links'] = $links;
        }
      }
      stanford_cap_profile_displays_field_collection_field_formatter_links($element, $entity_type, $entity, $field, $instance, $langcode, $items, $display);
      if (!empty($items) || !empty($element['#suffix'])) {
        $element['#attached']['css'][] = drupal_get_path('module', 'field_collection') . '/field_collection.theme.css';
      }
      break;
  }

  return $element;
}

/**
 * Helper function to add links to a field collection field.
 */
function stanford_cap_profile_displays_field_collection_field_formatter_links(&$element, $entity_type, $entity, $field, $instance, $langcode, $items, $display) {
  $settings = $display['settings'];
  $allow_create_item = FALSE;

  if ($settings['add'] && ($field['cardinality'] == FIELD_CARDINALITY_UNLIMITED || count($items) < $field['cardinality'])) {
    // Check whether the current is allowed to create a new item.
    $field_collection_item = entity_create('field_collection_item', array('field_name' => $field['field_name']));
    $field_collection_item->setHostEntity($entity_type, $entity, LANGUAGE_NONE, FALSE);

    if (field_collection_item_access('create', $field_collection_item)) {
      $allow_create_item = TRUE;
      $path = field_collection_field_get_path($field);
      list($id) = entity_extract_ids($entity_type, $entity);
      $element['#suffix'] = '';
      if (!empty($settings['description'])) {
        $element['#suffix'] .= '<div class="description field-collection-description">' . field_filter_xss($instance['description']) . '</div>';
      }
      $title = entity_i18n_string("field:{$field['field_name']}:{$instance['bundle']}:setting_add", $settings['add']);
      $add_path = $path . '/add/' . $entity_type . '/' . $id;
      $element['#suffix'] .= '<ul class="action-links action-links-field-collection-add"><li>';
      $element['#suffix'] .= l($title, $add_path, array('query' => drupal_get_destination()));
      $element['#suffix'] .= '</li></ul>';
    }
  }
  // If there is no add link, add a special class to the last item.
  if (!empty($items) || $allow_create_item) {
    if (empty($element['#suffix'])) {
      $index = count(element_children($element)) - 1;
      $element[$index]['#attributes']['class'][] = 'field-collection-view-final';
    }

    $element += array('#prefix' => '', '#suffix' => '');
    $element['#prefix'] .= '<div class="field-collection-container clearfix">';
    $element['#suffix'] .= '</div>';
  }

  return $element;
}
